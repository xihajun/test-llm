1
00:00:00,000 --> 00:00:17,519
All right, it's four o'clock now.

2
00:00:17,519 --> 00:00:18,519
Let's get started.

3
00:00:18,519 --> 00:00:19,519
Hi, everyone.

4
00:00:19,519 --> 00:00:20,519
This is Yan.

5
00:00:20,519 --> 00:00:25,000
Welcome to the lightning lesson for the course, From Users to Builders,

6
00:00:25,000 --> 00:00:27,679
AI-Powered Productivity for Tech Roles.

7
00:00:28,600 --> 00:00:30,839
First, several logistic things here.

8
00:00:30,839 --> 00:00:33,320
This is a half an hour Zoom meeting.

9
00:00:33,320 --> 00:00:36,600
We will spend like 20 to 25 minutes on the lecture

10
00:00:36,600 --> 00:00:39,520
and then use the remaining for the Q&A.

11
00:00:43,399 --> 00:00:44,240
During the lecture,

12
00:00:44,240 --> 00:00:47,340
feel free to put your questions in the Zoom chat window and then

13
00:00:47,340 --> 00:00:51,880
use the emoji reactions to vote for others' questions.

14
00:00:51,880 --> 00:00:55,039
We will answer the most popular questions in the end.

15
00:00:55,039 --> 00:00:59,399
The meeting is recorded and you will receive an email from Maven about where to download

16
00:00:59,399 --> 00:01:02,200
the recorded video and audio.

17
00:01:02,200 --> 00:01:05,840
Now let's jump right into the topic.

18
00:01:06,719 --> 00:01:10,000
AI is the new buzzword. Everyone is talking about it

19
00:01:10,000 --> 00:01:13,280
and big companies are pouring money in it. But if you

20
00:01:13,280 --> 00:01:17,519
really use chargebt, you may find actually quite often

21
00:01:17,519 --> 00:01:22,239
that chargebt is dumb. It's lazy, it forgets about things,

22
00:01:22,239 --> 00:01:28,519
it didn't do what I asked you to do. So we become upset, sometimes painful and curious.

23
00:01:28,519 --> 00:01:31,920
Why is others' chat GPT so smart and so powerful?

24
00:01:33,079 --> 00:01:35,040
Well, you're at the right place.

25
00:01:35,040 --> 00:01:39,200
This is because we used it wrong and it's not our fault.

26
00:01:39,200 --> 00:01:42,819
To some extent, chat GPT is flawed in design.

27
00:01:42,819 --> 00:01:47,920
This product is designed to support and encourage conversations or chats.

28
00:01:48,480 --> 00:01:51,680
It makes sense because that's the most intuitive way of interaction.

29
00:01:52,400 --> 00:01:57,120
However, this form of product would naturally lead to certain usage

30
00:01:57,120 --> 00:02:01,760
that makes Gen AI forget about things, lose track of details, and appear dumb and lazy.

31
00:02:02,640 --> 00:02:05,000
In this lesson, you will learn about a core concept

32
00:02:05,000 --> 00:02:08,000
from relevant research that can explain this all.

33
00:02:08,000 --> 00:02:11,000
It will help you make sense of the unexpected

34
00:02:11,000 --> 00:02:14,000
and undesired behaviors, and naturally leads

35
00:02:14,000 --> 00:02:17,000
to a counterintuitive but simple trick.

36
00:02:17,000 --> 00:02:20,000
If you use it, you will find the AI to be smarter

37
00:02:20,000 --> 00:02:24,000
and help you better on most tasks immediately.

38
00:02:24,000 --> 00:02:25,000
But in order to do that, we can't treat HGBT as a black box anymore. and help you better on most tasks immediately.

39
00:02:26,400 --> 00:02:29,400
But in order to do that, we can't treat ChargBT as a black box anymore.

40
00:02:29,400 --> 00:02:32,000
We don't come up with a random explanation

41
00:02:32,000 --> 00:02:34,800
or try out different tricks and wishing it to work.

42
00:02:34,800 --> 00:02:37,199
In this lesson, we will tackle the lazy

43
00:02:37,199 --> 00:02:40,800
and forgetful problems of AI systematically,

44
00:02:40,800 --> 00:02:44,199
beginning with understanding what is inside ChargBT.

45
00:02:47,000 --> 00:02:51,000
Note, ChargBT is still developing very fast. We hope what you learn today will still be relevant in a few years.

46
00:02:51,000 --> 00:02:54,000
So we need to go to the research.

47
00:02:54,000 --> 00:02:59,000
The most relevant research of ChaiGBT began about six years ago.

48
00:02:59,000 --> 00:03:01,000
It began with a foundation model,

49
00:03:01,000 --> 00:03:07,000
and then alignment was added to make it something similar to today's ChaiGBT.

50
00:03:07,000 --> 00:03:14,000
In order to effectively use this tool, we also need to add proper prompting and a solid understanding of context windows.

51
00:03:14,000 --> 00:03:20,000
These four are the most practical and fundamental components of using ChaiGBT.

52
00:03:20,000 --> 00:03:28,000
Understanding each component will make our AI smarter and our work more effective.

53
00:03:28,000 --> 00:03:32,000
In the full course, we will go over each of them,

54
00:03:32,000 --> 00:03:35,000
but today we only have about 30 minutes.

55
00:03:35,000 --> 00:03:38,000
So we'll still try to do it, but focus on one thing,

56
00:03:38,000 --> 00:03:42,000
the context window, because it can help with all of your problems.

57
00:03:42,000 --> 00:03:46,520
It's often overlooked, but it's central to explain and correct

58
00:03:46,520 --> 00:03:51,120
a lot of the problems of Gen AI.

59
00:03:51,120 --> 00:03:52,919
After understanding the concept, we

60
00:03:52,919 --> 00:03:55,560
will then introduce a simple but very effective trick

61
00:03:55,560 --> 00:03:58,560
to effectively manage the context window.

62
00:03:58,560 --> 00:04:00,960
You may be familiar with the GBD on the left,

63
00:04:00,960 --> 00:04:03,120
which is often the case for people not managing

64
00:04:03,120 --> 00:04:04,840
their context window.

65
00:04:04,840 --> 00:04:08,039
It gave short answers, not willing to help,

66
00:04:08,039 --> 00:04:11,840
but with the same model and even the same prompt.

67
00:04:11,840 --> 00:04:14,000
After we use this simple trick,

68
00:04:14,000 --> 00:04:16,680
the GPT immediately becomes more willing to help

69
00:04:16,680 --> 00:04:17,959
and even smarter.

70
00:04:17,959 --> 00:04:20,639
This is the power of contacts window management.

71
00:04:20,639 --> 00:04:23,439
And let's begin the journey by first understanding

72
00:04:23,439 --> 00:04:25,000
what is a context window.

73
00:04:25,000 --> 00:04:31,000
Context window is a concept introduced very early in the original GPT paper.

74
00:04:31,000 --> 00:04:37,000
It has its meaning derived from the original along with time, even in OpenAI's own documents.

75
00:04:37,000 --> 00:04:44,000
But in this course, a context window is simply what a GPT sees when it generates responses.

76
00:04:44,000 --> 00:04:45,939
What does that mean?

77
00:04:45,939 --> 00:04:48,060
Let's take a look at a basic example.

78
00:04:49,379 --> 00:04:52,139
The simplest way to use ChaiGPT is,

79
00:04:52,139 --> 00:04:55,579
you ask it a question and it gives you an answer.

80
00:04:55,579 --> 00:04:57,740
In this example, it ask it,

81
00:04:57,740 --> 00:04:59,459
I have many large files to copy

82
00:04:59,459 --> 00:05:03,120
from one computer to another computer, what should I do?

83
00:05:03,120 --> 00:05:05,759
This sentence is my question.

84
00:05:05,759 --> 00:05:07,660
And it's also what Chai-Chibiti sees

85
00:05:07,660 --> 00:05:09,740
when generating the response.

86
00:05:09,740 --> 00:05:11,600
Therefore, in this example,

87
00:05:11,600 --> 00:05:14,459
this sentence is the context window.

88
00:05:14,459 --> 00:05:17,779
Again, this is a probably 90%, but not 100% the same

89
00:05:17,779 --> 00:05:19,899
as the original definition in the paper.

90
00:05:19,899 --> 00:05:21,819
But in the context of this course,

91
00:05:21,819 --> 00:05:24,480
a context window is what Chai-Chibiti sees

92
00:05:24,480 --> 00:05:25,279
when it generates

93
00:05:25,279 --> 00:05:28,680
responses.

94
00:05:28,680 --> 00:05:33,199
We just saw a simplest case of which ask ChaiGPT one question.

95
00:05:33,199 --> 00:05:37,279
Things begin to get more interesting when ChaiGPT generates a response and we ask a

96
00:05:37,279 --> 00:05:38,720
follow-up question.

97
00:05:38,720 --> 00:05:41,819
I cannot upload the file to the cloud storage.

98
00:05:41,819 --> 00:05:46,680
What are my options? In this case, the context window will

99
00:05:46,680 --> 00:05:50,199
change to the red rectangle.

100
00:05:50,199 --> 00:05:53,839
It would include the chat history and the latest

101
00:05:53,839 --> 00:05:55,480
question.

102
00:05:55,480 --> 00:05:57,480
This might be a little bit counterintuitive

103
00:05:57,480 --> 00:05:58,360
for some people.

104
00:05:58,360 --> 00:06:00,680
So let's stop here and make a clarification

105
00:06:00,680 --> 00:06:03,759
on a common misconception.

106
00:06:03,759 --> 00:06:06,060
ChatGPT is a good product.

107
00:06:06,060 --> 00:06:07,759
It gives people an impression

108
00:06:07,759 --> 00:06:09,740
that we're talking with a human.

109
00:06:09,740 --> 00:06:12,180
So it's natural for us to imagine,

110
00:06:12,180 --> 00:06:13,740
oh, ChatGPT has a memory,

111
00:06:13,740 --> 00:06:16,100
storing its understanding of the world,

112
00:06:16,100 --> 00:06:20,139
storing our chat history, our requests, and so on.

113
00:06:20,139 --> 00:06:22,100
And then it reads my question

114
00:06:22,100 --> 00:06:24,779
and tries to answer it by recalling from the memory

115
00:06:24,779 --> 00:06:31,680
and reasoning based on information. In this case, the context window would be only the latest

116
00:06:31,680 --> 00:06:38,639
question, not including the previous conversation. However, this is a natural and common misconception.

117
00:06:39,519 --> 00:06:46,040
OpenAI here uses a clever trick to make chatGPT appear to have memory.

118
00:06:46,040 --> 00:06:52,160
Under the hood, what happened is OpenAI includes the chat history as part of the context window

119
00:06:52,160 --> 00:06:57,720
and asks GPT to answer the question based on all the information, including the historical

120
00:06:57,720 --> 00:07:01,160
conversations and the latest question.

121
00:07:01,160 --> 00:07:07,920
In other words, chatGPT implements memory by appending chat history to the context window.

122
00:07:07,920 --> 00:07:13,560
When we ask ChaiGBT a new question, what happens is, the answer from the last round and the

123
00:07:13,560 --> 00:07:16,819
latest question was added to the context window.

124
00:07:16,819 --> 00:07:17,819
Nothing else.

125
00:07:17,819 --> 00:07:21,019
No memory, no database, no state.

126
00:07:21,019 --> 00:07:25,000
So in the example above, the context window would be my first question,

127
00:07:25,000 --> 00:07:29,000
chatGPT's first response, and my second question.

128
00:07:29,000 --> 00:07:32,000
This is a very important clarification.

129
00:07:32,000 --> 00:07:35,000
Actually, it immediately causes two problems.

130
00:07:35,000 --> 00:07:40,000
The first problem is that the context window is finite.

131
00:07:40,000 --> 00:07:46,399
ChatGPT, or any generic so far, can only process a limited number of input.

132
00:07:46,399 --> 00:07:53,199
GPT 3.5 had a limit of 4k tokens, which is about 3000 words, and gradually expanded to

133
00:07:53,199 --> 00:07:54,199
16k.

134
00:07:54,199 --> 00:08:02,399
GPT 4 had a limit of 8k tokens, and gradually expanded to 128k, but still kept a limit of

135
00:08:02,399 --> 00:08:05,000
output window of 4k tokens.

136
00:08:05,000 --> 00:08:07,759
These context windows appear large,

137
00:08:07,759 --> 00:08:09,199
but for certain tasks,

138
00:08:09,199 --> 00:08:12,079
they can be quickly consumed and causing issues.

139
00:08:13,120 --> 00:08:13,959
For example,

140
00:08:13,959 --> 00:08:17,199
here the user asks ChaiGBT to write a Python program

141
00:08:17,199 --> 00:08:20,399
with an actual requirement that for some reason,

142
00:08:20,399 --> 00:08:23,079
don't use the library of NumPy.

143
00:08:23,079 --> 00:08:28,120
The AI then outputs a Python program which can easily cost hundreds, sometimes a thousand

144
00:08:28,120 --> 00:08:30,560
worth of tokens.

145
00:08:30,560 --> 00:08:35,519
Then the user did a few rounds of iterations to ask the AI to add the feature of A and

146
00:08:35,519 --> 00:08:36,919
B.

147
00:08:36,919 --> 00:08:41,440
Up to this point, the context window may still hold the entire chat history, showing the

148
00:08:41,440 --> 00:08:43,179
red rectangle.

149
00:08:43,179 --> 00:08:45,519
But assume that it's close to the upper limit of the

150
00:08:45,519 --> 00:08:51,360
context window. In this situation, then the user asks, can you also do C in the program?

151
00:08:52,399 --> 00:08:57,360
Then, in order to still fit the context window and focus on the latest and potentially the most

152
00:08:57,360 --> 00:09:03,440
important requests, chatGPT drops the first conversation and moves the context window down

153
00:09:03,440 --> 00:09:06,960
to only keep the latest conversations.

154
00:09:06,960 --> 00:09:08,519
And this causes a problem.

155
00:09:08,519 --> 00:09:10,759
The request of I cannot use NumPy

156
00:09:10,759 --> 00:09:13,440
is now not in the context window anymore.

157
00:09:13,440 --> 00:09:16,279
And ChaiGBD has no knowledge on that anymore.

158
00:09:16,279 --> 00:09:19,919
So it's totally possible that in the latest response,

159
00:09:19,919 --> 00:09:21,960
it may begin using NumPy.

160
00:09:21,960 --> 00:09:23,840
And from the user's perspective,

161
00:09:23,840 --> 00:09:26,679
ChaiGBD fails to satisfy our requirements.

162
00:09:26,679 --> 00:09:28,039
It forgets about things.

163
00:09:28,039 --> 00:09:31,080
It's not as smart as the beginning of the conversation.

164
00:09:31,080 --> 00:09:33,279
This is all caused by the fact that

165
00:09:33,279 --> 00:09:35,279
the context window is limited

166
00:09:35,279 --> 00:09:37,840
and it cannot accommodate infinite chat.

167
00:09:39,860 --> 00:09:43,399
The finite size of the problem of the context window

168
00:09:43,399 --> 00:09:46,759
is easy to recognize and mitigate.

169
00:09:46,759 --> 00:09:51,200
When the conversation is long and AI appears less smart, we can consider restarting the

170
00:09:51,200 --> 00:09:53,080
conversation.

171
00:09:53,080 --> 00:10:00,320
But a lot of times, even when the conversation is short, we still feel the AI is lazy and

172
00:10:00,320 --> 00:10:01,399
dumb.

173
00:10:01,399 --> 00:10:07,919
And that's because of another more subtle but impactful limit. GPT has difficulties

174
00:10:07,919 --> 00:10:15,759
processing long or unorganized content. For this long or unorganized context windows,

175
00:10:15,759 --> 00:10:20,879
GPT may miss certain requirements, especially those need attention to the details.

176
00:10:21,600 --> 00:10:25,720
In the previous example, even if the entire conversation can fit

177
00:10:25,720 --> 00:10:27,279
into the context window,

178
00:10:27,279 --> 00:10:30,840
it is still not uncommon that GPT may give a code

179
00:10:30,840 --> 00:10:34,039
doing A and C and forget about B.

180
00:10:34,039 --> 00:10:37,440
One way to understand that is we can treat GPT

181
00:10:37,440 --> 00:10:41,159
as an intern that have limited intelligence.

182
00:10:41,159 --> 00:10:43,840
When it spends the brain power on somewhere,

183
00:10:43,840 --> 00:10:45,840
it has to spend less power somewhere

184
00:10:45,840 --> 00:10:54,159
else. And in this example, because the requirements are scattered everywhere, shown as the green texts,

185
00:10:54,879 --> 00:10:59,919
GPT needs to spend actual intelligence on recognizing what are the actual requirements

186
00:10:59,919 --> 00:11:07,120
from this long and messy text. And that distracted. So it couldn't spend as much intelligence

187
00:11:07,120 --> 00:11:08,740
on the actual problem solving.

188
00:11:09,960 --> 00:11:12,440
And this is just the one side of the story.

189
00:11:12,440 --> 00:11:15,059
Another potentially even worse side is,

190
00:11:15,059 --> 00:11:18,899
the majority of the context window is actually bad answers.

191
00:11:18,899 --> 00:11:21,720
We were not satisfied with GPT's previous answers,

192
00:11:21,720 --> 00:11:24,840
and that's why we further iterate to add new requests.

193
00:11:24,840 --> 00:11:26,399
So from the perspective

194
00:11:26,399 --> 00:11:28,820
of probably answer the latest question,

195
00:11:28,820 --> 00:11:31,240
all the previous answers are useless

196
00:11:31,240 --> 00:11:32,940
or even wrong to some extent.

197
00:11:33,840 --> 00:11:36,820
This again distracts GPT.

198
00:11:36,820 --> 00:11:38,039
It needs to figure out,

199
00:11:38,039 --> 00:11:39,799
oh, this text are actually wrong,

200
00:11:39,799 --> 00:11:43,039
where are the problems and how to fix them?

201
00:11:43,039 --> 00:11:45,820
As humans, we all know that this is sometimes even harder

202
00:11:45,820 --> 00:11:47,759
than getting something from scratch.

203
00:11:47,759 --> 00:11:51,759
So overall, it is this scattered around the green prompts

204
00:11:51,759 --> 00:11:53,960
and the long distracting red prompts

205
00:11:53,960 --> 00:11:57,299
that degrades GBT's intelligence.

206
00:11:59,059 --> 00:12:02,759
Unfortunately, this is even not the end of the story.

207
00:12:02,759 --> 00:12:05,519
When we see AI becomes dumb and lazy,

208
00:12:05,519 --> 00:12:07,360
what is our first reaction?

209
00:12:07,360 --> 00:12:09,799
We chat more, give it more requests

210
00:12:09,799 --> 00:12:12,600
and hope this could correct the problem.

211
00:12:12,600 --> 00:12:15,519
But now you understand the context window and its limits,

212
00:12:15,519 --> 00:12:18,340
you can see how this is not only not helping,

213
00:12:18,340 --> 00:12:20,019
but actually make things worse.

214
00:12:20,899 --> 00:12:23,360
Because now we have even longer chat histories

215
00:12:23,360 --> 00:12:24,840
to put in the context window,

216
00:12:24,840 --> 00:12:25,000
which means it's more likely to get cut off and more distracting. Because now we have even longer chat histories to put in the context window,

217
00:12:25,000 --> 00:12:29,000
which means it's more likely to get cut off and more distracting.

218
00:12:29,000 --> 00:12:35,000
The requirements are further scattered around, and the bad previous responses are even longer.

219
00:12:35,000 --> 00:12:37,000
That makes everything worse.

220
00:12:37,000 --> 00:12:39,000
So it's not self-correctable.

221
00:12:39,000 --> 00:12:42,000
In the case of AI becomes dumb or forgetful,

222
00:12:42,000 --> 00:12:45,679
following our first reaction of chatting more will make it even

223
00:12:45,679 --> 00:12:53,120
worse. I'll pause here to review what just happened. We now learn from ILM research that

224
00:12:53,120 --> 00:12:59,120
the contacts window is a core concept deciding how smart chatGPT may appear and how effective

225
00:12:59,120 --> 00:13:07,000
we could use it. Based on this concept, what previously appears frustrating, upset, and even weird behaviors

226
00:13:07,000 --> 00:13:09,720
now suddenly begin to make sense.

227
00:13:09,720 --> 00:13:14,019
When we chat with chatGBT, it's nothing more than appending our chat history to its

228
00:13:14,019 --> 00:13:15,879
contacts window.

229
00:13:15,879 --> 00:13:21,360
And more chat ends up with a messier contacts window, which will result in a dumb or forgetful

230
00:13:21,360 --> 00:13:23,600
or lazy AI.

231
00:13:23,600 --> 00:13:26,559
Our first reaction is to chat more to correct it,

232
00:13:26,559 --> 00:13:28,159
but it simply doesn't work.

233
00:13:28,159 --> 00:13:29,840
It's not really our fault.

234
00:13:29,840 --> 00:13:33,399
It's mostly rooted from how chat GPT is designed.

235
00:13:33,399 --> 00:13:35,799
It's designed to encourage us to chat

236
00:13:35,799 --> 00:13:38,440
and that inevitably leads to this situation.

237
00:13:39,879 --> 00:13:42,679
But does that mean that we have to live with it?

238
00:13:42,679 --> 00:13:44,279
Not necessarily.

239
00:13:44,279 --> 00:13:48,600
Before touching the actual solution, let's detour a little bit to learning to drive for

240
00:13:48,600 --> 00:13:50,039
a moment.

241
00:13:50,039 --> 00:13:54,799
When we learn about driving, in many cases, our first reaction is actually wrong.

242
00:13:54,799 --> 00:13:59,679
For example, when a tire blows, humans' first reaction is to hit the brake.

243
00:13:59,679 --> 00:14:00,720
But it's wrong.

244
00:14:00,720 --> 00:14:08,000
The best practice is actually to live it along and gradually decelerate. The question is, how can we know what is the best practice?

245
00:14:08,000 --> 00:14:12,000
And how can we really do that in real life?

246
00:14:12,000 --> 00:14:14,000
The answer is simple.

247
00:14:14,000 --> 00:14:15,000
Through training.

248
00:14:15,000 --> 00:14:19,000
Training tells you how a technology works internally.

249
00:14:19,000 --> 00:14:21,000
Tells you what's the best practice and why.

250
00:14:21,000 --> 00:14:24,000
And helps you practice until you make it a habit.

251
00:14:24,000 --> 00:14:25,840
Until you remember it a habit, until you remember

252
00:14:25,840 --> 00:14:32,440
it in your muscle memory. And it also applies to ChagGBT. To properly use ChagGBT, we need

253
00:14:32,440 --> 00:14:37,080
training too. We need training to correct our first-day reaction and use good practice

254
00:14:37,080 --> 00:14:48,840
to replace it. And for our specific problem, the solution based on our previous understanding is, we need to manage our context window intentionally.

255
00:14:48,840 --> 00:14:54,500
Instead of blindly accepting TryGPT's suboptimal design, we should proactively think about

256
00:14:54,500 --> 00:14:57,720
what our context window should look like.

257
00:14:57,720 --> 00:15:00,679
Is it in the best shape for GPT to work well?

258
00:15:00,679 --> 00:15:07,000
If we follow this mindset, it will be easy to come up with a much more effective prompt or context window, for example.

259
00:15:07,000 --> 00:15:13,000
Simply put all of the requirements in one paragraph, with nothing else.

260
00:15:13,000 --> 00:15:18,000
Write a Python program to do A, B, and C. I cannot use NumPy.

261
00:15:18,000 --> 00:15:24,000
But how do we do that? Does that mean that we need to start a new conversation every time when I need to chat?

262
00:15:24,000 --> 00:15:26,519
That's not stupid.

263
00:15:26,519 --> 00:15:30,159
Fortunately, we have a hidden feature in the chat GPT's UI

264
00:15:30,159 --> 00:15:32,639
helps us to do this context window management.

265
00:15:33,559 --> 00:15:37,679
And that is this small pencil button below our question.

266
00:15:37,679 --> 00:15:39,279
It means edit.

267
00:15:39,279 --> 00:15:41,679
We can click it to edit the current prompt

268
00:15:41,679 --> 00:15:44,500
and there will be a button set, save and submit.

269
00:15:44,500 --> 00:15:47,519
Clicking it will change this prompt in the context window,

270
00:15:47,519 --> 00:15:49,779
rather than append it to the context window.

271
00:15:50,840 --> 00:15:53,000
Let's take a look at the example here.

272
00:15:53,000 --> 00:15:55,679
A side note is we are using GPT 3.5 here

273
00:15:55,679 --> 00:15:57,720
because it has a smaller context window

274
00:15:57,720 --> 00:16:00,679
and it's easier to trigger those behaviors.

275
00:16:00,679 --> 00:16:04,200
GPT-4 has the same issue and benefits from the same trick.

276
00:16:04,200 --> 00:16:05,559
It's just not that friendly

277
00:16:05,559 --> 00:16:07,759
for this 30 minute long learning course.

278
00:16:09,159 --> 00:16:10,879
Come back to our example.

279
00:16:10,879 --> 00:16:12,320
It's following the previous example

280
00:16:12,320 --> 00:16:15,399
of copying files from a computer to another.

281
00:16:15,399 --> 00:16:17,679
Here we further ask the Chai GPT,

282
00:16:17,679 --> 00:16:20,120
oh, I cannot upload the files to the cloud storage.

283
00:16:20,120 --> 00:16:22,000
What are my options?

284
00:16:22,000 --> 00:16:24,080
Chai GPT gives a very short answer

285
00:16:24,080 --> 00:16:26,399
without any detailed instructions.

286
00:16:27,440 --> 00:16:29,720
But if we use the edit trick,

287
00:16:29,720 --> 00:16:32,200
note how we change the prompt here.

288
00:16:32,200 --> 00:16:34,559
We simply copy paste the second prompt

289
00:16:34,559 --> 00:16:36,600
after the first prompt,

290
00:16:36,600 --> 00:16:39,159
making it a complete request.

291
00:16:39,159 --> 00:16:41,480
Oh, I want to copy files from computer to another

292
00:16:41,480 --> 00:16:44,320
and I cannot upload the files to the cloud.

293
00:16:44,320 --> 00:16:48,440
Then suddenly, TryGBD becomes more diligent and intelligent.

294
00:16:48,440 --> 00:16:52,360
It gives details and specific and organized answers.

295
00:16:52,360 --> 00:16:54,919
This is a very different behavior from before.

296
00:16:54,919 --> 00:16:57,679
And note, here we still use the same model.

297
00:16:57,679 --> 00:16:59,519
Even the prompt is the same.

298
00:16:59,519 --> 00:17:02,919
What was changed is the content of context window.

299
00:17:02,919 --> 00:17:06,279
We intentionally make it precise and brief.

300
00:17:06,279 --> 00:17:08,839
And this is the core of context window management.

301
00:17:10,200 --> 00:17:11,839
We can continue the conversation.

302
00:17:12,980 --> 00:17:14,460
Back to the chat style.

303
00:17:14,460 --> 00:17:16,000
If we further ask the chat GPT

304
00:17:16,000 --> 00:17:18,059
following the previous conversations,

305
00:17:18,059 --> 00:17:22,039
I'm copying files from a Mac to a PC, what shall I do?

306
00:17:22,039 --> 00:17:24,859
Then chat GPT gives a bunch of solutions.

307
00:17:24,859 --> 00:17:27,359
The third of them is cloud storage.

308
00:17:27,359 --> 00:17:29,359
And actually, we literally just said

309
00:17:29,359 --> 00:17:31,359
I cannot upload files to the cloud

310
00:17:31,359 --> 00:17:33,200
in the immediate previous round.

311
00:17:33,200 --> 00:17:34,539
Stupid, right?

312
00:17:34,539 --> 00:17:35,559
How to fix it?

313
00:17:35,559 --> 00:17:37,180
You tell me.

314
00:17:37,180 --> 00:17:39,359
Context window management.

315
00:17:39,359 --> 00:17:42,259
Instead of relying on ChaiGBT to append everything

316
00:17:42,259 --> 00:17:44,359
and construct its own context window,

317
00:17:44,359 --> 00:17:46,319
we construct it by ourselves.

318
00:17:46,319 --> 00:17:49,640
Simply append, I'm copying the files from a Mac to a PC

319
00:17:49,640 --> 00:17:52,319
to our previous prompt, and that's it.

320
00:17:52,319 --> 00:17:55,700
Gpt suddenly becomes smart, just like a different AI.

321
00:17:55,700 --> 00:17:57,279
No cloud storage anymore.

322
00:17:59,279 --> 00:18:01,579
So let's reflect on this example.

323
00:18:01,579 --> 00:18:02,799
Why did it work?

324
00:18:02,799 --> 00:18:04,259
What is the internal mechanism

325
00:18:04,259 --> 00:18:06,000
so that I can use it somewhere else?

326
00:18:06,960 --> 00:18:08,160
In the chat style,

327
00:18:08,160 --> 00:18:11,400
we have the asks or requirements scattered everywhere

328
00:18:11,400 --> 00:18:14,160
and GPT needs to spend its intelligence

329
00:18:14,160 --> 00:18:17,539
on recognizing and understanding the requirements.

330
00:18:17,539 --> 00:18:19,000
But in the edit style,

331
00:18:19,000 --> 00:18:21,119
the contact is well organized

332
00:18:21,119 --> 00:18:23,819
with clean statements on what needs to be done.

333
00:18:23,819 --> 00:18:25,619
So GPT could save the intelligence

334
00:18:25,619 --> 00:18:27,799
to really focus on solving the problem.

335
00:18:28,700 --> 00:18:31,559
In the chat style, chat GPT's imperfect

336
00:18:31,559 --> 00:18:35,079
or incorrect answer becomes a major part of the prompt.

337
00:18:35,079 --> 00:18:38,099
And that's both a waste and sometimes a distraction

338
00:18:38,099 --> 00:18:39,960
of the context window.

339
00:18:39,960 --> 00:18:43,339
On the contrary, this is not included in the edit style

340
00:18:43,339 --> 00:18:46,319
and we have efficient use of the context window.

341
00:18:46,319 --> 00:18:52,480
Meanwhile, thanks to the editing feature, we still keep the same ease of use.

342
00:18:52,480 --> 00:18:57,240
Actually there is a bonus benefit of the editing style, that is the reusability.

343
00:18:57,240 --> 00:19:02,839
When we write a prompt to help ChaiGBT accomplish some task, the prompt is not only to explain

344
00:19:02,839 --> 00:19:05,359
what we expect from it, but more importantly,

345
00:19:05,359 --> 00:19:11,279
to correct its undesired behaviors. For example, due to some reason we cannot use NumPy in the

346
00:19:11,279 --> 00:19:15,599
company's computer, but Chachamiti likes to solve the problem using this library,

347
00:19:15,599 --> 00:19:21,839
so we need to include this requirement in the prompt. However, when we use the chat style,

348
00:19:21,839 --> 00:19:28,299
it's nearly impossible for us to use the prompt because such kind of correction of unexpected behaviors

349
00:19:28,299 --> 00:19:32,599
are scattered all around the place, across many conversations.

350
00:19:32,599 --> 00:19:37,900
But for the edit style use, we always have the latest and greatest prompt at hand

351
00:19:37,900 --> 00:19:42,299
summarizing all the requirements and corrections, ready to use.

352
00:19:42,299 --> 00:19:45,400
This is especially helpful in AI-assisted programming,

353
00:19:45,400 --> 00:19:47,359
which we will cover in the full course.

354
00:19:49,640 --> 00:19:52,599
And what we just experienced is not only a journey

355
00:19:52,599 --> 00:19:54,680
to effective use of ChaiGBT,

356
00:19:54,680 --> 00:19:56,980
but also a great example of training.

357
00:19:57,920 --> 00:20:02,119
Before training, we face a lazy, forgetful, and dumb AI,

358
00:20:02,119 --> 00:20:04,440
rely on our first reaction to use it,

359
00:20:04,440 --> 00:20:09,079
and blame open AI for when we see unexpected behaviors.

360
00:20:09,079 --> 00:20:10,880
After the training, we understood

361
00:20:10,880 --> 00:20:12,519
how it works internally.

362
00:20:12,519 --> 00:20:14,680
We made sense of all those behaviors

363
00:20:14,680 --> 00:20:16,720
and learned about the best practices,

364
00:20:16,720 --> 00:20:19,039
which is edit, not chat.

365
00:20:19,039 --> 00:20:21,839
The training lets us know the best way to use

366
00:20:21,839 --> 00:20:24,559
chatGPT is actually to not chat.

367
00:20:24,559 --> 00:20:26,359
And in the full course, we will also

368
00:20:26,359 --> 00:20:29,599
help you do exercises to form a habit to make it a muscle

369
00:20:29,599 --> 00:20:31,400
memory.

370
00:20:31,400 --> 00:20:35,079
Overall, the general principle is for more complicated tools,

371
00:20:35,079 --> 00:20:36,559
you need more training.

372
00:20:36,559 --> 00:20:41,319
It's applied to bikes, cars, planes, and AIs.

373
00:20:41,319 --> 00:20:43,940
And you need people who know the ins and outs

374
00:20:43,940 --> 00:20:46,079
and people who know how to teach to train you.

375
00:20:47,759 --> 00:20:52,079
In the full course, we will also go over different components of ChaiGBT and have a

376
00:20:52,079 --> 00:20:58,240
comprehensive overview on how to prepare yourself in terms of mindset, knowledge, and practical

377
00:20:58,240 --> 00:21:06,140
tricks like AddItNotChat. We already had the first two cohorts sold out, and the current cohort will begin from July 22nd.

378
00:21:07,579 --> 00:21:09,519
All right, this is it for learning course.

379
00:21:09,519 --> 00:21:10,599
Hope you enjoyed this,

380
00:21:10,599 --> 00:21:12,660
and I'm happy to take any questions.

381
00:21:12,660 --> 00:21:14,680
Let me go over the chat window

382
00:21:14,680 --> 00:21:16,519
to figure out what are the questions.

383
00:21:21,299 --> 00:21:23,480
About Google, so the question is,

384
00:21:23,480 --> 00:21:26,599
didn't Google recently void this issue with the infinitely window

385
00:21:26,599 --> 00:21:27,599
model?

386
00:21:27,599 --> 00:21:33,319
Yes, in the recent, I think that's in the last few days, Google proposed this.

387
00:21:33,319 --> 00:21:37,400
But my understanding is still in the pretty research phase.

388
00:21:37,400 --> 00:21:43,880
After it gets into production, hopefully we will have less burden in manually managing

389
00:21:43,880 --> 00:21:45,259
all of this context window.

390
00:21:45,259 --> 00:21:49,079
But before that, this is a pretty easy to use

391
00:21:49,079 --> 00:21:50,319
and effective trick.

392
00:21:52,920 --> 00:21:57,099
And I saw that some of the questions are already answered

393
00:21:57,099 --> 00:22:00,460
and Yujun is also online to help answer the questions.

394
00:22:02,660 --> 00:22:05,000
And the question, could you point us to some resources

395
00:22:07,619 --> 00:22:10,420
where we can dig more into the foundation of LLMs

396
00:22:10,420 --> 00:22:14,700
to understand more critical concepts like concept windows?

397
00:22:14,700 --> 00:22:17,559
This is a pretty new field.

398
00:22:17,559 --> 00:22:20,660
And I will say most of the resources online

399
00:22:20,660 --> 00:22:24,039
is pretty not unsystematic.

400
00:22:24,039 --> 00:22:29,839
And at least for this field, this makes us painful.

401
00:22:29,839 --> 00:22:33,880
And we'd like to have a systematic overview of what

402
00:22:33,880 --> 00:22:36,200
was important from our perspective.

403
00:22:36,200 --> 00:22:39,400
So to directly answer, Nick, your question,

404
00:22:39,400 --> 00:22:42,400
the best place probably is our course.

405
00:22:42,400 --> 00:22:46,880
But if we see some other resources,

406
00:22:46,880 --> 00:22:50,720
there are not a very systematic one on top of my mind.

407
00:22:50,720 --> 00:22:52,720
If I see in the future,

408
00:22:52,720 --> 00:22:55,400
probably we can post it somewhere

409
00:22:55,400 --> 00:22:57,740
such as in the community of our course.

410
00:23:00,839 --> 00:23:02,920
What is the target audience of this course?

411
00:23:02,920 --> 00:23:05,960
What can we get out of this course in the end?

412
00:23:05,960 --> 00:23:08,920
If we are talking about the main course,

413
00:23:08,920 --> 00:23:10,539
the target audience of this course

414
00:23:10,539 --> 00:23:14,859
is the professionals in the IT industry.

415
00:23:14,859 --> 00:23:18,160
By that, I mean, we need to have some basic knowledge

416
00:23:18,160 --> 00:23:21,559
of Python, such as you need to know

417
00:23:21,559 --> 00:23:23,359
how to run Python programs,

418
00:23:23,359 --> 00:23:26,160
you need to know how to read simple Python programs

419
00:23:26,160 --> 00:23:28,000
and install Python libraries.

420
00:23:28,000 --> 00:23:31,519
You don't need to be a professional developer.

421
00:23:31,519 --> 00:23:36,039
For example, PMs, TPMs, engineering managers,

422
00:23:36,039 --> 00:23:40,119
analysts, they are all the target audience of this course.

423
00:23:40,119 --> 00:23:42,440
But we do require some basic Python knowledge.

424
00:23:42,440 --> 00:23:46,079
So if you're out of the IT industry,

425
00:23:46,079 --> 00:23:49,200
that might not be the best course for you.

426
00:23:49,200 --> 00:23:51,720
And what we can get out of this course in the end

427
00:23:51,720 --> 00:23:56,799
is the general idea is GenAI is a pretty effective tool

428
00:23:56,799 --> 00:23:58,640
to boost our productivity.

429
00:23:58,640 --> 00:24:02,319
But it's actually there are a lot of pitfalls and nuances,

430
00:24:02,319 --> 00:24:04,839
as we just demonstrated in this process.

431
00:24:04,839 --> 00:24:05,079
If we understand better from the foundation a lot of pitfalls and nuances as we just demonstrated in this process.

432
00:24:05,079 --> 00:24:11,440
If we understand better from the foundation and know about the best practices, this will

433
00:24:11,440 --> 00:24:14,339
help us a lot in boosting our productivity.

434
00:24:14,339 --> 00:24:19,200
My personal experience is boosted like two times to five times of my productivity, and

435
00:24:19,200 --> 00:24:23,099
we'd like to also share this with the course audience.

436
00:24:23,099 --> 00:24:27,799
That is the target outcome of this course.

437
00:24:27,799 --> 00:24:30,759
Thoughts on using Sandbox versus chat interface.

438
00:24:30,759 --> 00:24:32,720
That's a great question.

439
00:24:32,720 --> 00:24:36,279
Actually, I think using Sandbox is a pretty good way

440
00:24:36,279 --> 00:24:40,920
of using the GPT API or chat GPT.

441
00:24:40,920 --> 00:24:45,000
Some background is Sandbox is a tool provided by OpenAI.

442
00:24:46,119 --> 00:24:48,119
It's developer oriented.

443
00:24:48,119 --> 00:24:50,559
Instead of showing you a chat interface,

444
00:24:50,559 --> 00:24:55,200
it directly invokes the underlying GPT API.

445
00:24:55,200 --> 00:24:56,519
So it's a little bit different

446
00:24:56,519 --> 00:24:59,240
from the chat interface in a few ways.

447
00:24:59,240 --> 00:25:01,839
Difference one is chat-gpt is a product

448
00:25:01,839 --> 00:25:03,400
that built on top of GPT API.

449
00:25:03,400 --> 00:25:07,640
So it has quite some additional prompts and limits

450
00:25:07,640 --> 00:25:08,680
and features.

451
00:25:08,680 --> 00:25:10,640
But the sandbox doesn't have that,

452
00:25:10,640 --> 00:25:13,720
which means you may not have the alignment or safeguard

453
00:25:13,720 --> 00:25:16,359
of chat-gpt or other limits of chat-gpt.

454
00:25:16,359 --> 00:25:21,519
So you may be able to get into the dark side of GPT, which

455
00:25:21,519 --> 00:25:24,039
means it may not be that safe.

456
00:25:24,039 --> 00:25:28,079
And the second difference is there is also some limit

457
00:25:28,079 --> 00:25:30,019
to post on the chat GPT.

458
00:25:30,019 --> 00:25:34,200
For example, GPT-4 has a context window of 128K,

459
00:25:34,200 --> 00:25:37,279
but in chat GPT you cannot use that.

460
00:25:37,279 --> 00:25:40,019
Long before that, you will be cut by chat GPT saying that,

461
00:25:40,019 --> 00:25:41,579
oh, your message is too long,

462
00:25:41,579 --> 00:25:44,440
but in the sandbox, you are able to use that.

463
00:25:44,440 --> 00:25:48,700
The third difference is the maintenance of chat history.

464
00:25:48,700 --> 00:25:50,799
In chat-gpt-web interface,

465
00:25:50,799 --> 00:25:53,240
chat-gpt will maintain the context window

466
00:25:53,240 --> 00:25:55,279
as well as the chat history for you,

467
00:25:55,279 --> 00:25:58,759
but in the sandbox, a little bit more manual process,

468
00:25:58,759 --> 00:26:01,960
which is a good thing from the perspective of this course,

469
00:26:01,960 --> 00:26:06,400
because it forces you to manually manage the context window.

470
00:26:06,400 --> 00:26:09,920
And the fourth potential difference is the price.

471
00:26:09,920 --> 00:26:13,700
Charged BD is a subscription based $20 per month

472
00:26:13,700 --> 00:26:16,240
but Sandbox is per token.

473
00:26:17,680 --> 00:26:21,759
So overall, it's a pretty interesting idea to use Sandbox.

474
00:26:21,759 --> 00:26:25,480
If for anyone haven't tried that before,

475
00:26:25,480 --> 00:26:26,480
I encourage you to try that.

476
00:26:26,480 --> 00:26:29,359
It's a quite unique and fun experience.

477
00:26:29,359 --> 00:26:31,799
And that might be the right solution

478
00:26:31,799 --> 00:26:36,000
to context-mode management.

479
00:26:36,000 --> 00:26:38,000
Do we have an agenda of this course?

480
00:26:38,000 --> 00:26:39,559
Yes.

481
00:26:39,559 --> 00:26:44,079
In terms of cohort dates, we have that in the latest slide.

482
00:26:44,079 --> 00:26:46,519
And feel free to also scan the QR code

483
00:26:46,519 --> 00:26:49,480
so that you get to the cohort homepage

484
00:26:49,480 --> 00:26:55,440
and know more about the course, such as the syllabus,

485
00:26:55,440 --> 00:26:57,759
the expected outcome, target audience.

486
00:26:57,759 --> 00:27:01,839
We have everything there.

487
00:27:01,839 --> 00:27:04,599
Thoughts on using iterations of a highly structured prompt

488
00:27:04,599 --> 00:27:08,079
by edit and or having LM start by asking questions

489
00:27:08,079 --> 00:27:09,759
to improve context of prompt,

490
00:27:09,759 --> 00:27:12,160
then incorporating into prompt.

491
00:27:13,599 --> 00:27:16,640
That's more about prompt engineering.

492
00:27:16,640 --> 00:27:18,720
That's my understanding of this question.

493
00:27:20,359 --> 00:27:24,079
And we do have some tricks around that,

494
00:27:24,079 --> 00:27:26,859
but that may be out of the scope of this context window.

495
00:27:26,859 --> 00:27:31,539
But overall, yes, having the prompt formulated

496
00:27:31,539 --> 00:27:34,519
in a more structured way is definitely helpful

497
00:27:34,519 --> 00:27:37,259
for making Chai GPT smarter.

498
00:27:37,259 --> 00:27:39,819
As we mentioned before, Chai GPT is like,

499
00:27:39,819 --> 00:27:41,099
it's pretty much like an intern.

500
00:27:41,099 --> 00:27:42,779
Actually, I really like this analogy.

501
00:27:42,779 --> 00:27:44,500
It's energetic.

502
00:27:44,500 --> 00:27:46,720
It doesn't know what is tightest.

503
00:27:46,720 --> 00:27:48,920
And it can work 24-7.

504
00:27:48,920 --> 00:27:50,880
But it needs some hand-holding.

505
00:27:50,880 --> 00:27:53,400
And this kind of prominent engineering

506
00:27:53,400 --> 00:27:55,440
is a great example of hand-holding.

507
00:27:55,440 --> 00:27:59,440
You cannot assign a very complicated task to an intern

508
00:27:59,440 --> 00:28:02,640
and expect him or her to accomplish the task perfectly.

509
00:28:02,640 --> 00:28:05,339
You have to do some hand handholding and potentially even

510
00:28:05,339 --> 00:28:06,359
babysitting.

511
00:28:06,359 --> 00:28:09,119
And problem engineering and context window management

512
00:28:09,119 --> 00:28:10,819
are very good examples of a start point.

513
00:28:15,460 --> 00:28:19,000
And what might be a more beginner, novice-oriented

514
00:28:19,000 --> 00:28:21,400
Gen AI course?

515
00:28:21,400 --> 00:28:29,339
That really depends on your background and the intention of what you want to learn.

516
00:28:29,339 --> 00:28:37,559
In my suggestions, actually, if you want even more beginner or novice course, probably a

517
00:28:37,559 --> 00:28:39,400
course is not the best option.

518
00:28:39,400 --> 00:28:49,240
Directly go to the chat.openai.com or other similar products, begin using it and begin to feel the capability envelope

519
00:28:49,240 --> 00:28:54,240
of GenAI is probably the best thing to do to begin with,

520
00:28:55,420 --> 00:28:57,720
because this will give you a feeling.

521
00:28:57,720 --> 00:29:01,160
And then you also give you some questions.

522
00:29:01,160 --> 00:29:04,880
With the questions, it will be easier for you to figure out,

523
00:29:04,880 --> 00:29:08,839
oh, what I want from a course like that?

524
00:29:08,839 --> 00:29:11,079
What are the pinpoints?

525
00:29:11,079 --> 00:29:12,960
What can the AI bring to me?

526
00:29:14,279 --> 00:29:17,240
I think getting those questions might be more important

527
00:29:17,240 --> 00:29:19,799
than figuring out the answers.

528
00:29:19,799 --> 00:29:22,079
So to directly answer a question,

529
00:29:22,079 --> 00:29:24,799
probably the best course is sign up a account

530
00:29:24,799 --> 00:29:26,339
using Chatshubd from today.

531
00:29:29,599 --> 00:29:32,519
It seems that the price of course increases per cohort.

532
00:29:32,519 --> 00:29:33,599
Would that be a trend?

533
00:29:34,440 --> 00:29:36,880
It sounds like you can already answer to that.

534
00:29:38,059 --> 00:29:41,160
What are your thoughts on the content of the course

535
00:29:41,160 --> 00:29:44,819
potentially becoming outdated when models iterate?

536
00:29:44,819 --> 00:29:46,680
For example, context window and formation

537
00:29:46,680 --> 00:29:47,759
infinite window model.

538
00:29:47,759 --> 00:29:49,440
That's a great question.

539
00:29:49,440 --> 00:29:51,920
Sounds like Yujeng already addressed that.

540
00:29:51,920 --> 00:29:54,920
But generally, the idea are twofolds.

541
00:29:54,920 --> 00:29:57,720
The first is the content, of course,

542
00:29:57,720 --> 00:29:59,440
can be basically divided into two things.

543
00:29:59,440 --> 00:30:01,559
One is the underlying research, and another

544
00:30:01,559 --> 00:30:03,279
is based on those research that derive

545
00:30:03,279 --> 00:30:05,000
the tricks and skills.

546
00:30:06,160 --> 00:30:08,559
For a lot of fundamental things,

547
00:30:08,559 --> 00:30:10,559
they will not change in a long time.

548
00:30:10,559 --> 00:30:15,380
For example, the initial GPT model has been proposed

549
00:30:15,380 --> 00:30:18,200
like six years, but it's the basic principle

550
00:30:18,200 --> 00:30:19,819
still remains the same.

551
00:30:19,819 --> 00:30:23,000
And another side is we do see this field

552
00:30:23,000 --> 00:30:24,059
is growing very fast.

553
00:30:24,059 --> 00:30:30,799
That's also a reason why ourselves are enthusiasts of this field, and we keep up with the field

554
00:30:30,799 --> 00:30:32,079
every day.

555
00:30:32,079 --> 00:30:36,799
We try to figure out what are the most important tricks and principles and distill them into

556
00:30:36,799 --> 00:30:41,880
the course to make it up to date.

557
00:30:41,880 --> 00:30:45,000
Due to the limit of time, we will take the last question here.

558
00:30:45,000 --> 00:30:50,000
Yan, have you played around cloud.ai Anthropic out of curiosity?

559
00:30:50,000 --> 00:30:52,000
Yes, I played with it.

560
00:30:52,000 --> 00:30:56,000
And it's quite interesting in terms of two aspects.

561
00:30:56,000 --> 00:31:00,000
The first is I found that the difficulty of managing my contacts window

562
00:31:00,000 --> 00:31:10,539
is much less for cloud v3, especially Opus. More specifically, for a lot of prompts and context windows,

563
00:31:10,539 --> 00:31:11,740
GPT may be lazy.

564
00:31:11,740 --> 00:31:17,299
So we need to do more tricks to massage those prompts

565
00:31:17,299 --> 00:31:19,180
and context windows to make it work.

566
00:31:19,180 --> 00:31:22,460
But for cloud V3, we don't need to do that tricks.

567
00:31:22,460 --> 00:31:24,619
From this perspective, we can see a trend

568
00:31:24,619 --> 00:31:26,880
that people also realize the problem

569
00:31:26,880 --> 00:31:28,319
with contacts window and make it,

570
00:31:28,319 --> 00:31:30,279
try to make it more user-friendly.

571
00:31:30,279 --> 00:31:32,039
And from another perspective,

572
00:31:32,039 --> 00:31:35,079
I also feel GPT-S4 is still a little bit smarter

573
00:31:35,079 --> 00:31:37,039
than Cloud AI, Cloud V3,

574
00:31:37,039 --> 00:31:40,099
but that may be just my feeling based on limited tests.

575
00:31:41,180 --> 00:31:45,000
So due to the limit of time, that's it for the Q&A.

576
00:31:45,000 --> 00:31:49,000
I really appreciate everyone's time and interest for attending this course.

577
00:31:49,000 --> 00:31:52,000
We look forward to seeing you in the actual course.

578
00:31:52,000 --> 00:31:55,000
Thanks a lot. Bye.

