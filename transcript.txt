[00:00:00,000 -> 00:00:02,839] 其实这个东西一说大家就都理解了
[00:00:02,879 -> 00:00:05,480] 但是我们在生活和工作中
[00:00:05,480 -> 00:00:08,039] 还是不自觉的会陷入这个误区
[00:00:08,679 -> 00:00:09,400] Hello大家好
[00:00:09,400 -> 00:00:10,439] 欢迎回到课代表旅程
[00:00:10,439 -> 00:00:12,160] 我是你们的课代表
[00:00:12,199 -> 00:00:15,160] 今天我们聊一个产品或者模型
[00:00:15,199 -> 00:00:16,719] 大家经常犯的误区
[00:00:16,719 -> 00:00:18,719] 就是越复杂越好
[00:00:18,960 -> 00:00:21,000] 其实这个道理很简单
[00:00:21,160 -> 00:00:24,160] 就是复杂的模型和复杂的产品
[00:00:24,320 -> 00:00:26,920] 越复杂它的应用场景越少
[00:00:26,960 -> 00:00:29,839] 其实这个东西一说大家就都理解了
[00:00:00,000 -> 00:00:05,120] 但是我们在生活和工作中还是不自觉的会陷入这个误区
[00:00:05,120 -> 00:00:10,320] 就是我们作为数据科学家经常会喜欢采用复杂的模型
[00:00:10,320 -> 00:00:14,919] 而且能觉得自己做出一个复杂的模型是一件很了不起的事情
[00:00:14,919 -> 00:00:17,920] 那产品有的时候也会设计的非常复杂
[00:00:17,920 -> 00:00:20,839] 希望大而全能满足用户的所有需求
[00:00:20,839 -> 00:00:22,120] 觉得这是一个好产品
[00:00:22,120 -> 00:00:27,239] 可是绝大多数的需求是应该被一个简单的功能
[00:00:00,000 -> 00:00:03,720] 或者说是一个简单的模型就可以解决的
[00:00:03,720 -> 00:00:05,280] 这个听起来是一个common sense
[00:00:05,280 -> 00:00:07,839] 但是为什么大家还会泛那样的误区呢
[00:00:08,199 -> 00:00:10,720] 我觉得有一个很重要的原因
[00:00:10,720 -> 00:00:12,519] 就是我们在学校的时候
[00:00:12,519 -> 00:00:14,919] 我们会从简单教到复杂
[00:00:15,160 -> 00:00:17,000] 就是你越厉害的学生
[00:00:17,000 -> 00:00:19,640] 你就越能解决那些复杂问题
[00:00:19,640 -> 00:00:22,000] 所以说当我们把这个思路带到了工作中
[00:00:22,120 -> 00:00:23,760] 我们会觉得越厉害的员工
[00:00:23,760 -> 00:00:26,160] 就是那些能解决复杂问题的员工
[00:00:26,160 -> 00:00:28,719] 然后厉害的这个问题本身没错
[00:00:00,000 -> 00:00:01,720] 就是你能解决复杂的问题
[00:00:01,760 -> 00:00:02,919] 但是你回过头来
[00:00:02,919 -> 00:00:05,080] 要满足绝大多数人的需求的时候
[00:00:05,120 -> 00:00:07,599] 你就应该从简单去入手
[00:00:07,599 -> 00:00:08,560] 简单和适合
[00:00:09,400 -> 00:00:12,000] 你复杂证明你是有技术能力的
[00:00:12,000 -> 00:00:13,119] 有技术深度的
[00:00:13,160 -> 00:00:15,480] 但是你还是要叠加一层
[00:00:15,519 -> 00:00:17,320] 你对用户需求的理解
[00:00:17,320 -> 00:00:19,039] 和你的工程能力
[00:00:19,399 -> 00:00:21,440] 你在适合的场合下
[00:00:21,440 -> 00:00:24,000] 用适合的工具去解决适合的问题
[00:00:24,359 -> 00:00:25,760] 这样才是一个好的工程师
[00:00:25,760 -> 00:00:26,519] 好的产品经理
[00:00:26,519 -> 00:00:27,719] 好的数据科学家
[00:00:00,000 -> 00:00:03,319] 就是能在合适的场景找到合适的问题
[00:00:03,319 -> 00:00:06,639] 用合适的工具去找到一个合适的解法去解决它
[00:00:07,120 -> 00:00:08,599] 然后说到这里的话
[00:00:08,599 -> 00:00:12,720] 我觉得就是简单这个词其实也值得多说一下
[00:00:12,839 -> 00:00:16,199] 因为我们中文的简单其实包含了两个意思
[00:00:16,199 -> 00:00:18,120] 一个是simple 一个是easy
[00:00:18,120 -> 00:00:20,399] 或者说用再精确的语言的话
[00:00:20,440 -> 00:00:22,679] 前一个大家可以理解为简约
[00:00:22,879 -> 00:00:25,600] 然后第二个可以理解为易用
[00:00:25,800 -> 00:00:29,839] 但是简单这个词大家经常是只带了同时这两种意思
[00:00:00,000 -> 00:00:01,199] 就是说这个东西简单
[00:00:01,199 -> 00:00:02,799] 那说明这个东西很易用对吧
[00:00:02,799 -> 00:00:05,000] 然后这个东西简单说明它很简约
[00:00:05,000 -> 00:00:07,000] 其实这两个区别非常大
[00:00:07,000 -> 00:00:10,320] 我觉得在这个模型设计产品设计
[00:00:10,320 -> 00:00:12,800] 尤其是当你在做一个复杂的系统的时候
[00:00:12,800 -> 00:00:15,279] 追求simple是一个很重要的事情
[00:00:15,279 -> 00:00:16,960] 我就在这再多讲一下
[00:00:17,640 -> 00:00:18,960] 这有什么区别呢
[00:00:18,960 -> 00:00:20,519] 其实这不是我自己的例子
[00:00:20,519 -> 00:00:21,920] 或者我自己的观点
[00:00:21,920 -> 00:00:25,160] 这是当时在Facebook的首席产品官Chris
[00:00:25,160 -> 00:00:27,199] 他给大家讲产品理念的时候
[00:00:27,199 -> 00:00:28,199] 讲到了一个观点
[00:00:28,199 -> 00:00:29,239] 打的一个比方
[00:00:00,000 -> 00:00:01,439] 他打的比方是什么呢
[00:00:01,439 -> 00:00:05,519] 就是我们要把橙子变成橙汁这件事情
[00:00:05,519 -> 00:00:07,120] 我们需要工具去做
[00:00:07,120 -> 00:00:08,480] 那有两种工具
[00:00:08,480 -> 00:00:09,640] 一种是机械的
[00:00:09,640 -> 00:00:11,240] 就是那种压一下
[00:00:11,240 -> 00:00:12,480] 然后就会出橙汁
[00:00:12,480 -> 00:00:14,400] 把橙子放进去压一下就会出橙汁
[00:00:14,400 -> 00:00:15,439] 不需要垫是吧
[00:00:15,439 -> 00:00:17,359] 非常清楚的一个过程
[00:00:17,359 -> 00:00:21,640] 还有这个电子的榨汁机可以做得非常复杂
[00:00:21,640 -> 00:00:24,359] 然后我们把橙子放进去按一个按钮
[00:00:24,359 -> 00:00:25,679] 它也会变成橙汁
[00:00:25,679 -> 00:00:27,719] 但是前一个是simple
[00:00:27,719 -> 00:00:29,079] 后一个是easy
[00:00:00,000 -> 00:00:03,080] 在使用上后一个确实使用起来是很方便的
[00:00:03,080 -> 00:00:05,000] 甚至你也可以加入自动清理等等
[00:00:05,000 -> 00:00:06,280] 让你做到一个动作
[00:00:06,280 -> 00:00:08,080] 然后按一个按钮就出来
[00:00:08,080 -> 00:00:10,199] 它也会告诉你程式的各种参数
[00:00:10,320 -> 00:00:12,279] 比如说你可以有电机热心屏等等
[00:00:12,800 -> 00:00:14,759] 它在做一个End product的时候
[00:00:14,759 -> 00:00:16,760] 这两种也许没有优劣之差
[00:00:16,760 -> 00:00:18,679] 但是你在一个系统里边的话
[00:00:18,679 -> 00:00:21,920] 你要追求用前一种方式去解决问题
[00:00:21,920 -> 00:00:22,600] 为什么
[00:00:22,600 -> 00:00:25,280] 因为当后一种东西出现问题的时候
[00:00:25,280 -> 00:00:27,960] 就是电子的榨汁机出现问题的时候
[00:00:00,000 -> 00:00:03,799] 你要花非常大的成本去找出问题在哪
[00:00:03,799 -> 00:00:05,000] 然后去维修它
[00:00:05,000 -> 00:00:06,519] 当前一个出现问题的时候
[00:00:06,519 -> 00:00:08,880] 你很容易就定位在问题出现在哪里
[00:00:08,880 -> 00:00:11,759] 它的解释性它的robustness都是很强的
[00:00:11,759 -> 00:00:13,640] 而且大家也会有这种感觉
[00:00:13,720 -> 00:00:15,400] 就是这种电子的东西
[00:00:15,439 -> 00:00:17,160] 你用个一两年用个三五年
[00:00:17,160 -> 00:00:18,440] 经常会出问题
[00:00:18,440 -> 00:00:20,120] 然后去维修起来也是非常贵的
[00:00:20,120 -> 00:00:22,600] 那个机械的你可以用一辈子用两辈子
[00:00:23,039 -> 00:00:25,640] 在一个当你就只是一个价值级也就罢了
[00:00:25,640 -> 00:00:27,239] 可是在一个复杂系统里边
[00:00:27,280 -> 00:00:29,960] 你的很多东西都是互相依赖的
[00:00:00,000 -> 00:00:03,080] 你的模型的结果可能被另一个人调用
[00:00:03,080 -> 00:00:04,919] 然后你也可能要调用别的模型的结果
[00:00:04,919 -> 00:00:08,640] 你的产品的feature和其他的一些feature可能也是相关的
[00:00:08,640 -> 00:00:12,320] 在工程的时候我们能用前一种方式去解决问题
[00:00:12,320 -> 00:00:14,919] 就一定不要用后一种方式去解决问题
[00:00:15,279 -> 00:00:17,000] 其实就是一个很简单的道理
[00:00:17,000 -> 00:00:19,239] 我觉得我们说出来区别了以后
[00:00:19,239 -> 00:00:21,440] 大家可以看一下自己做的哪些模型
[00:00:21,440 -> 00:00:25,440] 其实是可以用一个更simple更简约的方式去把它做好的
[00:00:25,440 -> 00:00:27,239] 你的产品和你的系统
[00:00:00,000 -> 00:00:04,540] 你能不能用一个更simple的方式去达到你该达到的目的
[00:00:04,540 -> 00:00:07,339] 好了这期视频就到这里我们下期再见
