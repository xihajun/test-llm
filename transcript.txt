[00:00:00,000 -> 00:00:04,200] Hello,大家好,歡迎回到我們職場系列的第四期
[00:00:04,200 -> 00:00:07,000] 在之前的幾期節目裡邊,我也跟大家說了
[00:00:07,000 -> 00:00:09,800] 我去採訪了一些身邊牛逼擅長的打工人
[00:00:09,800 -> 00:00:14,599] 那這一期我就把這些採訪總結成兩個問題和他們的答案
[00:00:14,599 -> 00:00:19,199] 這兩個問題分別是如何高效的學習和如何高效的工作
[00:00:19,199 -> 00:00:23,699] 那答案其實也很簡單,而且他們給的答案其實是驚人的一致啊
[00:00:23,699 -> 00:00:27,800] 就是如何高效的學習是帶著答案去尋找答案
[00:00:00,000 -> 00:00:01,919] 不光是带着问题去寻找答案
[00:00:01,919 -> 00:00:03,520] 而且要带着答案去寻找答案
[00:00:03,520 -> 00:00:05,160] 如何高效地工作
[00:00:05,160 -> 00:00:06,519] 他们给出的建议就是
[00:00:06,519 -> 00:00:07,519] Just do it
[00:00:07,519 -> 00:00:10,960] 那这样说起来好像听起来挺简单的
[00:00:10,960 -> 00:00:14,960] 可是为了能帮助大家更好地理解这些建议
[00:00:14,960 -> 00:00:18,519] 并且能马上应用去取得一个立干净的效果
[00:00:18,519 -> 00:00:21,559] 我就会稍稍展开一些这个问题和答案
[00:00:21,559 -> 00:00:23,600] 我就用学长W来举例吧
[00:00:23,600 -> 00:00:26,800] 他的职业生涯中遇到的这个坎坷
[00:00:26,800 -> 00:00:28,719] 和他如何迈过这些坎坷
[00:00:00,000 -> 00:00:03,240] 他怎麼樣子意識到了這兩件事情的重要性
[00:00:03,240 -> 00:00:05,879] 給大家稍稍用這個視力來展開
[00:00:05,879 -> 00:00:07,679] 可能我們可以理解得更好一點
[00:00:07,679 -> 00:00:09,160] 那最後的話
[00:00:09,160 -> 00:00:14,279] 我也會稍稍聊一些就是學長L、學長W
[00:00:14,279 -> 00:00:17,079] 他們身上不光他們的優點還有他們的缺點
[00:00:17,079 -> 00:00:19,600] 或者說他們自己覺得自己不足的地方
[00:00:19,600 -> 00:00:22,160] 你知道了優點可以幫你走得更快
[00:00:22,160 -> 00:00:25,320] 但是你知道了有缺點仍然能走這麼快
[00:00:25,320 -> 00:00:27,440] 你就大概感覺OK
[00:00:00,000 -> 00:00:03,000] 不是说一个人非要做到完美才可以升职
[00:00:03,399 -> 00:00:04,599] 就是跟大家
[00:00:05,599 -> 00:00:07,000] 帮大家缓解一下焦虑吧
[00:00:07,120 -> 00:00:08,800] 好话不多说我们就开始吧
[00:00:08,800 -> 00:00:09,800] 这两个问题啊
[00:00:09,800 -> 00:00:11,400] 第一个是如何高效的学习
[00:00:11,400 -> 00:00:12,800] 第二个是如何高效的工作
[00:00:12,800 -> 00:00:14,800] 那我们就从第一个问题开始吧
[00:00:14,800 -> 00:00:16,000] 如何高效的学习
[00:00:16,000 -> 00:00:18,199] 其实觉得学会了这一点啊
[00:00:18,399 -> 00:00:20,800] 不光可以让我们学东西学得更快
[00:00:21,000 -> 00:00:24,100] 而且能更快的发现自己知识上的不足
[00:00:24,100 -> 00:00:26,000] 和找到一些新的机会
[00:00:26,399 -> 00:00:27,899] 那我们就用学长
[00:00:00,000 -> 00:00:03,000] W的故事来帮大家讲一讲吧
[00:00:03,000 -> 00:00:06,000] 就是学长W他刚刚到了Facebook
[00:00:06,000 -> 00:00:08,000] 是一个E4
[00:00:08,000 -> 00:00:09,000] 他到了Facebook以后
[00:00:09,000 -> 00:00:10,000] 因为他从别的公司来的
[00:00:10,000 -> 00:00:12,000] Facebook大家可能也知道
[00:00:12,000 -> 00:00:14,000] 在整个科技行业里面算是
[00:00:14,000 -> 00:00:16,000] 动得非常快的,Move fast
[00:00:16,000 -> 00:00:18,000] 所以说他刚来Facebook以后
[00:00:18,000 -> 00:00:20,000] 节奏还没有完全适应
[00:00:20,000 -> 00:00:23,000] 在第一个这个Performance Review的时候
[00:00:23,000 -> 00:00:25,000] 自己觉得做得还不错
[00:00:25,000 -> 00:00:27,000] 可是Performance Review并不尽如人意
[00:00:27,000 -> 00:00:28,000] 那时候他就很焦虑
[00:00:00,000 -> 00:00:02,000] 覺得自己都要被開掉了
[00:00:02,000 -> 00:00:04,000] 第二年就來了一個TechLead
[00:00:04,000 -> 00:00:07,000] 他這個TechLead也變成了他的mentor
[00:00:07,000 -> 00:00:10,000] 他從這個TechLead身上就學到了很多很多東西
[00:00:10,000 -> 00:00:14,000] 最後也就是這個Career Path像火箭一樣的這樣起來了
[00:00:14,000 -> 00:00:16,000] 那他學到的
[00:00:16,000 -> 00:00:18,000] 他說學到的最重要的一個東西是什麼呢
[00:00:18,000 -> 00:00:20,000] 就是這個TechLead來了這個組以後
[00:00:20,000 -> 00:00:22,000] 作為一個完全新來的新人
[00:00:22,000 -> 00:00:25,000] 去給這個組寫了一個Wiki
[00:00:25,000 -> 00:00:27,000] Wiki就是Wikipedia
[00:00:27,000 -> 00:00:29,000] 在很多科技企業亞馬遜或者Facebook
[00:00:00,000 -> 00:00:02,000] 大家都会用Wikipedia的形式
[00:00:02,000 -> 00:00:05,000] 这样把知识和Documentation给做起来
[00:00:05,000 -> 00:00:08,000] 你其他的组想了解你们组在做什么
[00:00:08,000 -> 00:00:10,000] 去看你们组的Wiki就行了
[00:00:10,000 -> 00:00:12,000] 那他作为一个新人
[00:00:12,000 -> 00:00:14,000] 他主动去做了这件事情
[00:00:14,000 -> 00:00:15,000] 在这过程中
[00:00:15,000 -> 00:00:18,000] 就是把这个整个组重要的code
[00:00:18,000 -> 00:00:20,000] 几乎都读了一下是吧
[00:00:20,000 -> 00:00:22,000] 了解一下这个组的business到底是干什么的
[00:00:22,000 -> 00:00:24,000] 如果有不同不明白的问题
[00:00:24,000 -> 00:00:27,000] 就会带着这些问题去问
[00:00:00,000 -> 00:00:02,759] 剩下的就要去问组里的这些元老们
[00:00:03,120 -> 00:00:06,240] 那他很快地就搞清楚了这个组里是干嘛的
[00:00:06,599 -> 00:00:10,160] 学长W觉得这个事实在是太了不起了
[00:00:10,160 -> 00:00:12,160] 而且他也就马上学了
[00:00:12,359 -> 00:00:14,480] 以后他每去做一个新的领域
[00:00:14,599 -> 00:00:17,800] 他作为一个新人就去把这个组的 wiki 给写出来
[00:00:18,800 -> 00:00:20,600] 那他自己成为大佬了以后
[00:00:20,600 -> 00:00:23,120] 他也会去叫他带了小伙伴去写 wiki
[00:00:23,120 -> 00:00:27,239] 而且他会给这些小朋友们一些 pointer 和一些指导
[00:00:00,000 -> 00:00:04,040] 就是说你去哪儿可以找到这些资源或者资料
[00:00:04,040 -> 00:00:05,240] 你应该读什么东西
[00:00:05,240 -> 00:00:07,639] 最后你这个wiki大概写的是个什么样子
[00:00:07,639 -> 00:00:09,679] 可是他非常frustrated发现
[00:00:09,679 -> 00:00:12,480] 就是这些小朋友们并不喜欢干这件事情
[00:00:12,480 -> 00:00:13,519] 他觉得很奇怪
[00:00:13,519 -> 00:00:15,679] 就是说明明这件事特有用
[00:00:15,679 -> 00:00:17,440] 然后明明我也告诉你了怎么做
[00:00:17,440 -> 00:00:19,039] 我又告诉你这件事的价值
[00:00:19,039 -> 00:00:20,399] 为什么不做呢
[00:00:20,399 -> 00:00:23,039] 是不是我的领导力上出现了什么问题
[00:00:23,039 -> 00:00:26,280] 但是我后来跟他在一个采访的过程中交流
[00:00:26,280 -> 00:00:28,039] 我们终于总结出来了这一点
[00:00:00,000 -> 00:00:04,200] 就是他或者那个TagLead在做这件事情的时候
[00:00:04,200 -> 00:00:06,919] 他们是带着hypothesis去看东西的
[00:00:07,519 -> 00:00:10,839] 但是如果说你直接交给一个小朋友这么去做的话
[00:00:10,839 -> 00:00:13,839] 那个小朋友去看code可能会觉得这个code写得特别乱
[00:00:13,839 -> 00:00:15,359] 看一看lost了
[00:00:15,359 -> 00:00:16,960] 然后就不想做下去了
[00:00:17,239 -> 00:00:19,719] 所以这就会导致一个巨大的差别
[00:00:19,719 -> 00:00:22,120] 那什么是带着hypothesis去看问题呢
[00:00:22,399 -> 00:00:24,440] 我就把它用中文总结一下的话
[00:00:24,440 -> 00:00:27,519] 我觉得我们小时候老师经常跟我们说
[00:00:27,519 -> 00:00:29,800] 你要带着问题去找答案
[00:00:00,000 -> 00:00:02,040] 但是我觉得我们可以更进一步
[00:00:02,040 -> 00:00:03,799] 就是你带着答案去找答案
[00:00:04,320 -> 00:00:06,960] 你去看一段code
[00:00:06,960 -> 00:00:08,880] 或者说你去看一个business
[00:00:08,880 -> 00:00:11,119] 比如说如果我是一个data scientist
[00:00:11,119 -> 00:00:11,519] 是吧
[00:00:11,720 -> 00:00:13,679] 我如果去了解一个business的话
[00:00:13,800 -> 00:00:15,800] 我应该先去想一下
[00:00:15,800 -> 00:00:16,920] 我作为一张白纸
[00:00:17,039 -> 00:00:18,120] 什么东西最重要
[00:00:18,120 -> 00:00:19,719] 这个business什么东西最重要
[00:00:19,760 -> 00:00:21,399] 这个code如果去读一个code
[00:00:21,399 -> 00:00:23,559] 这个code到底它要是完成一个什么东西
[00:00:23,760 -> 00:00:25,960] 它用什么样的技术站去实现的
[00:00:25,960 -> 00:00:28,559] 它在实现过程中可能会遇到什么问题
[00:00:00,000 -> 00:00:01,540] 然后它应该是怎么解决的
[00:00:02,040 -> 00:00:03,740] 你带着这个框架去
[00:00:03,740 -> 00:00:05,500] 那就会有三种情况对吧
[00:00:05,679 -> 00:00:08,300] 第一就是这个code和你想的是一样的
[00:00:08,439 -> 00:00:10,339] 那你就可以很快的读懂这段code
[00:00:10,339 -> 00:00:11,599] 因为你是带着一个框架
[00:00:11,599 -> 00:00:13,900] 你去补充你的不断验证你的想法
[00:00:14,039 -> 00:00:15,500] 那你其实读起来是很快的
[00:00:15,500 -> 00:00:17,239] 而且你有一个这个线索
[00:00:17,339 -> 00:00:18,640] 你也不容易get lost
[00:00:18,899 -> 00:00:20,539] 不然的话你去看一段code
[00:00:20,539 -> 00:00:22,079] 尤其有的人写的code写的不好
[00:00:22,079 -> 00:00:23,280] 那就很难看懂它
[00:00:23,899 -> 00:00:25,600] 那第二段呢就是
[00:00:26,079 -> 00:00:27,679] 如果这个code写的比你好
[00:00:27,899 -> 00:00:28,879] 比你好很多的话
[00:00:28,879 -> 00:00:29,679] 那你就知道了
[00:00:00,000 -> 00:00:01,600] 哦 原来还可以这么做 是吧
[00:00:01,600 -> 00:00:03,919] 你瞬间就找到了自己知识上的不足
[00:00:03,919 -> 00:00:04,960] 然后找到了这个概念
[00:00:04,960 -> 00:00:06,360] 并且学会了怎么样子
[00:00:06,360 -> 00:00:08,720] 去用一个更好的方法去做这件事情
[00:00:09,240 -> 00:00:10,800] 第三就是他做的没有你好
[00:00:10,960 -> 00:00:13,359] 那你这时候就发现了一个新的机会 是吧
[00:00:13,359 -> 00:00:15,800] 就是你这个东西你可以实现得更好一点
[00:00:15,960 -> 00:00:18,160] 如果你这个事情本身足够重要
[00:00:18,160 -> 00:00:20,399] 然后你的方法又足够好的话
[00:00:20,480 -> 00:00:21,839] 那你就可以把它重写一下
[00:00:21,839 -> 00:00:23,559] 然后把这个东西给改进掉了
[00:00:24,239 -> 00:00:27,559] 对 所以说这就是带着 hypothesis 去看
[00:00:00,000 -> 00:00:04,879] 或者说带着答案去看答案,找答案的好处
[00:00:04,879 -> 00:00:07,320] 那这个样子可以让你学习的更快
[00:00:07,320 -> 00:00:09,919] 可以让你知道自己的不足,并且快速补足
[00:00:09,919 -> 00:00:11,839] 也可以让你找到更新的机会
[00:00:12,199 -> 00:00:14,000] 好,这就是第一个问题
[00:00:14,000 -> 00:00:16,600] 第一个问题有一个稍稍的补充
[00:00:16,600 -> 00:00:17,760] 就是还有小伙伴问
[00:00:17,760 -> 00:00:19,320] 比如说你到了一个Senior Level
[00:00:19,320 -> 00:00:22,320] System Design去哪儿学?有没有合适的书推荐?
[00:00:22,320 -> 00:00:23,679] 那学长L就说
[00:00:23,679 -> 00:00:25,760] 其实没有什么特别适合的书推荐
[00:00:25,760 -> 00:00:28,640] 因为他看到了最好的实践在公司里边
[00:00:00,000 -> 00:00:02,600] 然后这些人是并没有时间去写书的
[00:00:02,600 -> 00:00:06,080] 然后他看市面上看到的书也不代表最好的实践
[00:00:06,080 -> 00:00:08,839] 那他的建议就是说直接去读code
[00:00:08,839 -> 00:00:09,839] code doesn't lie
[00:00:09,839 -> 00:00:12,519] 而且大家一般如果在一个大公司里的话
[00:00:12,519 -> 00:00:16,239] 你的这个code首先你是很多都是有权限去读的
[00:00:16,239 -> 00:00:19,199] 并且他们就代表了业界的比较先进的实践
[00:00:19,199 -> 00:00:21,120] 所以说你从这儿把它
[00:00:21,120 -> 00:00:23,839] 如果你想去学一个东西怎么搭
[00:00:23,839 -> 00:00:27,079] 那直接就去看它在你们公司是怎么被搭出来的
[00:00:27,079 -> 00:00:29,079] 然后如果把这个东西学懂了以后
[00:00:00,000 -> 00:00:03,879] 那其实是比市面上的最大多数的书都更有用的
[00:00:03,879 -> 00:00:06,200] 甚至你可能还可以去找当事人去聊
[00:00:06,200 -> 00:00:08,080] 就是你当时为什么选了这个方案
[00:00:08,080 -> 00:00:09,199] 而不是选择其他方案
[00:00:09,640 -> 00:00:10,359] 嗯 对
[00:00:10,599 -> 00:00:12,880] 这个也算是一个小bonus question
[00:00:12,880 -> 00:00:15,359] 第二个问题我们继续用学长W的例子
[00:00:15,359 -> 00:00:17,839] 就是仍然是这个tech lead
[00:00:18,039 -> 00:00:21,199] 他之前就是他在遇到这个tech lead之前
[00:00:21,199 -> 00:00:22,679] 比如说他要做一件事情
[00:00:22,679 -> 00:00:24,160] 他想到了一个想法
[00:00:24,160 -> 00:00:25,120] 然后他要去做
[00:00:25,239 -> 00:00:26,160] 那他会怎么做呢
[00:00:26,160 -> 00:00:28,199] 他觉得他的学习速度也还行
[00:00:00,000 -> 00:00:05,000] 那他就要先去知道这个事儿,定义下来这个problem
[00:00:05,000 -> 00:00:08,000] 然后去想一些有什么样的可能的解决方法
[00:00:08,000 -> 00:00:12,000] 然后去跟组里的人聊一聊,看看这些东西靠不靠谱
[00:00:12,000 -> 00:00:15,000] 也可以聊一聊这个事之前有没有人做过
[00:00:15,000 -> 00:00:18,000] 然后之后他可能会写一个proposal
[00:00:18,000 -> 00:00:20,000] 这个proposal先跟组里的人过一遍
[00:00:20,000 -> 00:00:26,000] 然后可能找一些principal或者senior去review一下他的design
[00:00:26,000 -> 00:00:28,000] 或者看一下这个方法对不对
[00:00:00,000 -> 00:00:03,000] 那之后开始做,这个时间快的话可能两三天
[00:00:03,000 -> 00:00:05,000] 慢的话可能两三个礼拜
[00:00:05,000 -> 00:00:08,000] 可是当那个Tech Lead来了以后呢
[00:00:08,000 -> 00:00:11,000] 如果那个Tech Lead觉得有一件事情值得做
[00:00:11,000 -> 00:00:14,000] 或者说有一件事情他不清楚想去试一下
[00:00:14,000 -> 00:00:15,000] 直接就上手做了
[00:00:15,000 -> 00:00:17,000] 如果不懂的就直接看code
[00:00:17,000 -> 00:00:19,000] 然后就自己不断的自己unblock自己
[00:00:19,000 -> 00:00:20,000] 然后就往前做
[00:00:20,000 -> 00:00:22,000] 然后两三天就把这个东西做出来了
[00:00:22,000 -> 00:00:24,000] 这对他来说就一想
[00:00:24,000 -> 00:00:27,000] 没想到他怎么没有想到这个事情
[00:00:27,000 -> 00:00:28,000] 做事情还可以这样做呢
[00:00:00,000 -> 00:00:03,000] 我原来花那么多时间去讨论
[00:00:03,000 -> 00:00:05,000] 我其实这个讨论的时间
[00:00:05,000 -> 00:00:08,000] 我自己闷着头往前做的话
[00:00:08,000 -> 00:00:09,000] 其实已经把这个东西做出来了
[00:00:09,000 -> 00:00:12,000] 而且这样做有一些特别的好处
[00:00:12,000 -> 00:00:15,000] 其实是会对效率帮助特别高的
[00:00:15,000 -> 00:00:17,000] 对我们 Data Scientist 一样
[00:00:17,000 -> 00:00:21,000] 其实人的大脑在想一个问题的时候
[00:00:21,000 -> 00:00:22,000] 想的是很复杂
[00:00:22,000 -> 00:00:25,000] 但是你能表达出来的东西是有限的
[00:00:25,000 -> 00:00:27,000] 所以说你拿着一个新的想法
[00:00:27,000 -> 00:00:28,000] 去跟别人交流的时候
[00:00:00,000 -> 00:00:05,000] 很多时候你交流出来的内容并不是完全能像你脑子里想的那样
[00:00:05,000 -> 00:00:06,000] 想的一样
[00:00:06,000 -> 00:00:08,000] 可是当你把这个东西做出来了以后
[00:00:08,000 -> 00:00:10,000] 别人一看就哦懂了
[00:00:10,000 -> 00:00:12,000] 你要做的是这个东西
[00:00:12,000 -> 00:00:14,000] 大家讨论起来就会有效率的很多
[00:00:14,000 -> 00:00:18,000] 所以说哪怕你花两三天的时间去做出来了一个错的东西
[00:00:18,000 -> 00:00:22,000] 也比你花两三天的时间去写一个底站要好用
[00:00:22,000 -> 00:00:23,000] 因为你这个错的东西
[00:00:23,000 -> 00:00:25,000] 你当然你这里边不一定要做完
[00:00:25,000 -> 00:00:26,000] 是吧
[00:00:26,000 -> 00:00:27,000] 你可以放一些placeholder
[00:00:27,000 -> 00:00:29,000] 然后你可以写一些studio code
[00:00:00,000 -> 00:00:02,000] 然后对我们data scientist来说的话
[00:00:02,000 -> 00:00:05,000] 你的这个关键的数据你可以先写一个x,y,z
[00:00:05,000 -> 00:00:09,000] 但是起码大家看到了一个这个东西就知道
[00:00:09,000 -> 00:00:11,000] 哦,你要做的是这样的事情
[00:00:11,000 -> 00:00:13,000] 那我们讨论起来就会有效率
[00:00:13,000 -> 00:00:15,000] 大家如果发现你这里边出什么问题
[00:00:15,000 -> 00:00:17,000] 或者说有什么困难的话
[00:00:17,000 -> 00:00:19,000] 也值得更知道到底问题是出在哪
[00:00:19,000 -> 00:00:21,000] 可以给你一个更快的指点
[00:00:21,000 -> 00:00:23,000] 那更有很多情况下你就直接做出来了
[00:00:23,000 -> 00:00:24,000] 是吧,你直接做出来了
[00:00:24,000 -> 00:00:26,000] 你就不需要浪费那么多时间去讨论了
[00:00:00,000 -> 00:00:07,000] 所以说这个just do it是可以飞快提高你这个工作效率的一个方式
[00:00:07,000 -> 00:00:11,000] 那行这两个问题我们再稍稍回顾一下
[00:00:11,000 -> 00:00:14,000] 就是怎么样子快速的学习呢
[00:00:14,000 -> 00:00:17,000] 就是你带着hypothesis带着答案去寻找答案
[00:00:17,000 -> 00:00:22,000] 最后你就有就是这样会让你学得更快一点
[00:00:22,000 -> 00:00:25,000] 也可以让你更清楚的知道不足在哪
[00:00:25,000 -> 00:00:27,000] 如何提高做事的效率呢
[00:00:00,000 -> 00:00:02,000] 不要说话,直接上手做
[00:00:02,000 -> 00:00:05,000] 做到哪被block,然后再去找别人
[00:00:05,000 -> 00:00:10,000] 这个时候其实是比讨论半天,然后再去做要快很多
[00:00:10,000 -> 00:00:13,000] 那最后就讲一下两个学长吧
[00:00:13,000 -> 00:00:18,000] 有些他们自己觉得他们比如说刚入职的时候有什么不足
[00:00:18,000 -> 00:00:21,000] 和他们直到现在都觉得自己还有什么不足的地方
[00:00:21,000 -> 00:00:26,000] 比如说学长L他刚入职的时候就觉得自己的people skill不好
[00:00:00,000 -> 00:00:05,000] 比如说他会特别坚持他的做法和这个想法
[00:00:05,000 -> 00:00:09,000] 如果别人有一个其他的想法他觉得不好的话
[00:00:09,000 -> 00:00:13,000] 他就会很认真的去跟人家聊
[00:00:13,000 -> 00:00:15,000] 甚至有的时候就完全不让步
[00:00:15,000 -> 00:00:19,000] 那他后来慢慢意识到了说这个senior engineer
[00:00:19,000 -> 00:00:22,000] 其实没有right or wrong,都是tradeoff
[00:00:22,000 -> 00:00:25,000] 一个senior engineer如果他上来就讲这个是对的
[00:00:25,000 -> 00:00:26,000] 那个是错的
[00:00:26,000 -> 00:00:28,000] 他脑子中就会有一个特别大的警报
[00:00:00,000 -> 00:00:01,080] 特别大的警报
[00:00:01,080 -> 00:00:03,600] 其实所有的solution
[00:00:03,600 -> 00:00:05,000] 就是你可能进到一个新组
[00:00:05,000 -> 00:00:05,559] 你就觉得哇
[00:00:05,559 -> 00:00:07,160] 这个他们为什么这么旧的技术
[00:00:07,160 -> 00:00:09,199] 然后为什么他们不用更新的技术
[00:00:09,199 -> 00:00:11,519] 但是其实可能这是因为一个tradeoff
[00:00:11,519 -> 00:00:13,759] 然后有可能是因为历史遗留
[00:00:13,759 -> 00:00:17,640] 有可能是因为一些其他的条件约束
[00:00:17,640 -> 00:00:23,679] 总之就是一方面他对自己的想法更加humble了
[00:00:23,679 -> 00:00:25,640] 另外一方面他知道了
[00:00:25,640 -> 00:00:27,559] 就是提高自己的people skill
[00:00:00,000 -> 00:00:03,640] 可以让整个项目更快一些
[00:00:03,640 -> 00:00:09,279] 因为当大家在花时间讨论这种技术问题
[00:00:09,279 -> 00:00:10,679] 而且带着情绪讨论
[00:00:10,679 -> 00:00:11,720] 因为大家都是人嘛
[00:00:11,720 -> 00:00:15,160] 很多时候你没有办法不带着情绪的去讨论问题的
[00:00:15,160 -> 00:00:17,359] 你带着这些情绪再去讨论问题的话
[00:00:17,359 -> 00:00:21,320] 最后就会导致整个项目被内耗
[00:00:21,320 -> 00:00:25,960] 那学长W他觉得他的一个不好的地方
[00:00:25,960 -> 00:00:28,359] 包括他现在他都觉得还不好的地方
[00:00:28,359 -> 00:00:29,760] 就是他很容易让步
[00:00:00,000 -> 00:00:04,400] 就是他比如说在一个技术的实现方案
[00:00:04,400 -> 00:00:07,400] 然后PM跑过来说我们要用方法B来实现
[00:00:07,400 -> 00:00:09,400] 然后他觉得方法B肯定不可能行的
[00:00:09,400 -> 00:00:11,800] 那你其实应该用方法A
[00:00:11,800 -> 00:00:15,400] 但是如果他没有特别特别切实的证据
[00:00:15,400 -> 00:00:19,199] 那这个PM又很坚持方法B的话
[00:00:19,199 -> 00:00:22,199] 他可能会愿意去先试一下方法B
[00:00:22,199 -> 00:00:25,199] 然后但是他可能会就是不去做那种
[00:00:25,199 -> 00:00:26,399] highway investment
[00:00:26,399 -> 00:00:29,199] 用一些比较hacky的方法去试一下
[00:00:00,000 -> 00:00:02,879] 然后尽可能的去试一下关键假设
[00:00:02,879 -> 00:00:05,200] 如果说这个假设最后不成立的话
[00:00:05,200 -> 00:00:09,640] 那最后想办法再带回原来他觉得更正确的方式上来做
[00:00:09,640 -> 00:00:11,080] 而且这些都是这种情况
[00:00:11,080 -> 00:00:12,679] 他一开始想的都是对的
[00:00:12,679 -> 00:00:17,879] 但是这样确实会导致一些项目本身走了一些无谓的弯路啊什么的
[00:00:17,879 -> 00:00:23,000] 如果他是一个他觉得如果他是一个更他有更强的leadership skill的话
[00:00:23,000 -> 00:00:27,800] 他其实可以在一开始就把这个相关的stakeholder给说服
[00:00:00,000 -> 00:00:03,319] 然后去使用他觉得更合理的方案
[00:00:03,319 -> 00:00:04,839] 他没有做到这一点
[00:00:04,839 -> 00:00:10,519] 但是他现在仍然是在一个很高的水平上去做很重要的事情
[00:00:10,519 -> 00:00:14,000] 讲这两位学长他们身上自己觉得的缺点
[00:00:14,000 -> 00:00:15,560] 就是想跟大家说一下
[00:00:15,560 -> 00:00:18,199] 他们都是有自己的挑战的
[00:00:18,199 -> 00:00:20,280] 你不是要做到完美才可以升职
[00:00:20,280 -> 00:00:22,760] 而且升职也不代表你就是一个完美的人
[00:00:22,760 -> 00:00:24,039] 我们从他们身上
[00:00:24,039 -> 00:00:27,160] 就是从优秀的人身上去学习他们的闪光点
[00:00:27,160 -> 00:00:29,120] 去学习他们的做事方法
[00:00:00,000 -> 00:00:03,899] 但是最後升職這件事情大家不要太關注結果
[00:00:03,899 -> 00:00:05,900] 關注自己本身的成長就好了
[00:00:05,900 -> 00:00:08,400] 這也是為什麼在所有的採訪製完以後
[00:00:08,400 -> 00:00:11,900] 我覺得Growth Mindset那一期是最值得看的那一期
[00:00:11,900 -> 00:00:14,900] 或者說是我最急著發布的那一期
[00:00:14,900 -> 00:00:16,899] 因為你自己成長了
[00:00:16,899 -> 00:00:19,399] 你在這個過程也會更enjoyable一點
[00:00:19,399 -> 00:00:20,899] 那好我們這期就到這裡
[00:00:20,899 -> 00:00:21,899] 我們下期再見
