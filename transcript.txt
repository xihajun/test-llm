[00:00:00,000 -> 00:00:02,279] 大家欢迎回到这个课代表例证
[00:00:02,279 -> 00:00:04,799] 我们今天邀请了金海峰博士
[00:00:05,120 -> 00:00:08,880] 金海峰博士是一个6000星还是8000星的开源大佬
[00:00:09,560 -> 00:00:10,640] 8000星
[00:00:10,640 -> 00:00:16,600] 他是做了一个大名鼎鼎的项目啊叫autocurase
[00:00:16,760 -> 00:00:19,399] 然后他是在博士期间做的这个项目
[00:00:19,399 -> 00:00:21,160] 后来被谷歌收购了
[00:00:21,160 -> 00:00:23,199] 然后并到了curase这个生态里面
[00:00:23,199 -> 00:00:24,600] 他现在也是在谷歌
[00:00:24,719 -> 00:00:26,480] 在谷歌里面打开源的工
[00:00:00,000 -> 00:00:03,439] 非常感谢柯代表的邀请
[00:00:03,439 -> 00:00:07,639] 也感谢介绍出来有点厉害
[00:00:07,639 -> 00:00:08,160] 行
[00:00:08,160 -> 00:00:13,919] 这个STAR不能完全说明问题
[00:00:13,919 -> 00:00:17,039] 还是得看这个项目真正的应用的影响力
[00:00:17,039 -> 00:00:17,640] 好的
[00:00:17,640 -> 00:00:19,719] 我们今天请到海峰博士来
[00:00:19,719 -> 00:00:23,160] 第一他的经历情绪还是一个挺特殊的
[00:00:23,160 -> 00:00:27,920] 而且也挺非常独特且耀眼的经历
[00:00:00,000 -> 00:00:02,520] 就是在学校里边做了一个这么大的项目
[00:00:02,520 -> 00:00:05,679] 然后又去谷歌去做这个开源
[00:00:05,960 -> 00:00:10,560] 然后另外一方面呢就是我们很多同学可能都听说过开源
[00:00:10,800 -> 00:00:14,359] 但是就是没有一个真的开源大佬来帮我们介绍一下
[00:00:14,359 -> 00:00:19,600] 到底开源的这个现状啊社区的生态啊和它最近的发展啊
[00:00:19,679 -> 00:00:23,280] 包括其实我听说最近开源其实是一个很火的生意模式
[00:00:23,519 -> 00:00:27,399] 它到底是怎么从一个这种一个简单的形式变成了
[00:00:27,399 -> 00:00:29,160] 一个现在这样一个复杂形式的
[00:00:00,000 -> 00:00:02,640] 我们都想请海康博士帮我们来讲一讲
[00:00:03,399 -> 00:00:05,040] 好的 没问题
[00:00:05,040 -> 00:00:08,880] 首先我们要搞清楚第一个问题就是什么是开源
[00:00:09,119 -> 00:00:10,839] 这里就可以用一个很简单的例子
[00:00:10,839 -> 00:00:12,240] 我们日常用的两个操作系统
[00:00:12,240 -> 00:00:14,000] 一个是手机操作系统
[00:00:14,000 -> 00:00:15,640] 一个是iOS 一个是安卓
[00:00:15,880 -> 00:00:17,359] 安卓实际上是开源的
[00:00:17,359 -> 00:00:18,839] iOS实际上是闭源的
[00:00:19,199 -> 00:00:23,239] 这个区别就是你上网搜这个操作系统的原代码
[00:00:23,239 -> 00:00:24,320] 你能不能搜得到
[00:00:24,600 -> 00:00:26,320] iOS你肯定是搜不到的
[00:00:26,320 -> 00:00:28,039] 就苹果肯定是把它保护起来了
[00:00:00,000 -> 00:00:04,219] 然后但是安卓你搜就直接能搜到所有的代码你都看得到
[00:00:04,219 -> 00:00:07,219] 然后比如说你自己研发一款手机
[00:00:07,219 -> 00:00:09,220] 你完全可以直接把那个代码用到你的手机里
[00:00:09,220 -> 00:00:13,679] 这里我们要做一个区分就是开源和免费
[00:00:13,679 -> 00:00:15,800] 这是两个非常容易混淆的概念
[00:00:15,800 -> 00:00:18,960] 开源现在不一定免费
[00:00:18,960 -> 00:00:21,800] 因为随着开源最开始开源都是免费的
[00:00:21,800 -> 00:00:24,800] 它就起源于这个免费软件运动
[00:00:24,800 -> 00:00:26,839] 大家就倡导所有的软件都应该免费
[00:00:00,000 -> 00:00:05,599] 但是随着它的发展,很多新的开源协议出现了之后
[00:00:05,599 -> 00:00:09,439] 它实际上不见得所有的代码你能看得到的都是可以免费用的
[00:00:09,439 -> 00:00:13,640] 就是你能看得见,但是你想用
[00:00:13,640 -> 00:00:16,559] 可能还要遵守很多协议里的条款才行
[00:00:16,559 -> 00:00:18,480] 并不见得所有的都是免费的
[00:00:18,480 -> 00:00:20,600] 对,因为你刚刚说开源不等于免费
[00:00:20,600 -> 00:00:22,719] 我就在想,既然你的东西我都能看见了
[00:00:22,719 -> 00:00:24,839] 我完全可以复制粘贴,我就可以自己做一个
[00:00:24,839 -> 00:00:26,440] 那我为什么要给你付钱
[00:00:26,440 -> 00:00:29,359] 但是这里边要有一个协议的关系,对吧
[00:00:00,000 -> 00:00:02,839] 但是这个协议它是怎么说呢
[00:00:02,839 -> 00:00:04,040] 我这有两个问题
[00:00:04,040 -> 00:00:05,160] 第一听起来呢
[00:00:05,160 -> 00:00:07,360] 它好像是一个君子协定
[00:00:07,360 -> 00:00:09,880] 但是它肯定是有这个法律效应的
[00:00:09,880 -> 00:00:12,960] 那是不是你必须在认可这个法律的国家
[00:00:12,960 -> 00:00:14,119] 它这个协议才有效
[00:00:14,800 -> 00:00:15,320] 对
[00:00:15,679 -> 00:00:20,879] 但是开源是一个基本上只有技术发展到一定程度的国家
[00:00:20,879 -> 00:00:22,920] 才会开始玩的一个东西
[00:00:22,920 -> 00:00:27,079] 这个君子协定至少限制住了这个厂内的大玩家
[00:00:27,120 -> 00:00:29,760] 就是你至少如果用这个开源赚了很多很多的钱
[00:00:00,000 -> 00:00:02,080] 你肯定是一个在遵守这个
[00:00:02,279 -> 00:00:04,160] 君子协定的范围之内在玩
[00:00:04,160 -> 00:00:07,839] 对美国的协议在中国是可以有效的吗
[00:00:08,199 -> 00:00:09,439] 可以的可以的
[00:00:09,439 -> 00:00:11,039] 而且最近还出了一些新闻
[00:00:11,039 -> 00:00:12,119] 不知道你有没有看到
[00:00:12,119 -> 00:00:12,919] 就是有一个
[00:00:12,919 -> 00:00:14,439] 还没去
[00:00:14,439 -> 00:00:15,640] 是是是
[00:00:16,640 -> 00:00:17,320] 对啊
[00:00:17,320 -> 00:00:20,320] 所以大家所以确实大家会真的遵守这个东西
[00:00:20,320 -> 00:00:22,879] 就是如果一个如果我违反了这个协议
[00:00:22,879 -> 00:00:24,640] 美国的律师来告我的话
[00:00:24,640 -> 00:00:26,480] 中国的厂家是要赔钱的
[00:00:27,320 -> 00:00:27,839] 对
[00:00:28,120 -> 00:00:29,000] 嗯好
[00:00:00,000 -> 00:00:02,000] 那这个就make sense了
[00:00:02,000 -> 00:00:04,160] 那其实这个东西我觉得挺好的
[00:00:04,160 -> 00:00:06,240] 就是它不一定免费
[00:00:06,240 -> 00:00:08,000] 但是它起码透明对吧
[00:00:08,000 -> 00:00:09,199] 就是我知道了它的
[00:00:09,199 -> 00:00:13,160] 就是因为现在大家都说网上的这个trust
[00:00:13,160 -> 00:00:14,199] 是一个很大的问题
[00:00:14,199 -> 00:00:16,839] 比如说我不知道你是不是真的在collect我的信息
[00:00:16,839 -> 00:00:18,399] 但是如果我开源了以后
[00:00:18,399 -> 00:00:20,199] 你的东西我全部可以看
[00:00:20,199 -> 00:00:22,519] 那我就极大的增加我的trust
[00:00:23,320 -> 00:00:29,440] 对这个trust有一部分是防止你本身有意的collect我的信息
[00:00:00,000 -> 00:00:02,040] 还有一部分就是防止这个黑客入侵
[00:00:02,040 -> 00:00:03,879] 如果我把这个代码开源出来
[00:00:03,879 -> 00:00:06,200] 大家都可以看到里面所有的安全漏洞
[00:00:06,200 -> 00:00:08,039] 就会及时的把这些安全漏洞补上
[00:00:08,039 -> 00:00:11,839] 所以整个也对防范其他外界的这个入侵
[00:00:11,839 -> 00:00:13,000] 也有很大的作用
[00:00:13,000 -> 00:00:15,599] 行 那我们把商业模式这个东西稍稍拎出来
[00:00:15,599 -> 00:00:17,000] 因为它跟所有东西都有关
[00:00:17,000 -> 00:00:18,519] 我们把它稍微放到一边
[00:00:18,519 -> 00:00:20,320] 我们说协作这件事情吧
[00:00:20,320 -> 00:00:23,879] 就是我正好就是讲一讲为什么大家要开源呢
[00:00:24,600 -> 00:00:27,760] 对 首先我觉得开源在很多年前
[00:00:00,000 -> 00:00:02,879] 比如说我第一次听到这个词是在大学里上课的时候
[00:00:02,879 -> 00:00:07,280] 那当时老师给我们说的第一个开源的网站居然不是
[00:00:07,280 -> 00:00:10,779] 就是让我们去查开源代码的网站居然不是GitHub
[00:00:10,779 -> 00:00:13,419] 他没有建议我们到GitHub上去查开源代码
[00:00:13,419 -> 00:00:16,660] 而当时他提出的最重要的一个网站是SourceForge
[00:00:16,660 -> 00:00:20,059] 现在已经一个基本没落的网站
[00:00:20,059 -> 00:00:21,660] 就是在那个时候
[00:00:21,660 -> 00:00:24,260] SourceForge它主要的功能是发布代码
[00:00:24,260 -> 00:00:26,160] 但实际上它不怎么强调协作
[00:00:26,160 -> 00:00:28,300] 但GitHub就是非常强调协作
[00:00:00,000 -> 00:00:03,960] 强调这个social功能,程序员的社交网站
[00:00:03,960 -> 00:00:06,160] 稍稍问一个暴露年龄的问题
[00:00:06,160 -> 00:00:08,080] 那是七七年的时候老师跟你说的
[00:00:08,080 -> 00:00:11,839] 11年左右可能
[00:00:11,839 -> 00:00:13,839] 11年左右
[00:00:13,839 -> 00:00:16,800] 对,但是GitHub它就非常强调social
[00:00:16,800 -> 00:00:18,480] 非常强调程序员的社交
[00:00:18,480 -> 00:00:22,800] 所以这个这几年实际上这个也是开源的一个变化
[00:00:22,800 -> 00:00:23,800] 开源的目的的一个变化
[00:00:23,800 -> 00:00:26,280] 最开始我只要把我的代码发布到网上
[00:00:26,280 -> 00:00:27,480] 大家能看能用
[00:00:27,480 -> 00:00:29,000] 能欣赏我的技术
[00:00:00,000 -> 00:00:01,080] 这个就足够了
[00:00:01,080 -> 00:00:04,160] 但是现在越来越多的是强调我们在一个公共
[00:00:04,160 -> 00:00:07,000] 大家都能access网站来进行协作
[00:00:07,679 -> 00:00:10,080] 能把更多的人emol进这个community
[00:00:10,080 -> 00:00:11,400] 才是他最大的错误
[00:00:11,400 -> 00:00:13,439] 这也是一定程度上的区块链
[00:00:14,039 -> 00:00:16,280] 也可以这么理解
[00:00:16,280 -> 00:00:17,320] 是是是
[00:00:17,320 -> 00:00:18,480] 好
[00:00:18,480 -> 00:00:18,960] 对
[00:00:18,960 -> 00:00:24,079] 那他对一开始大家发布这个东西的动机是为了说
[00:00:24,079 -> 00:00:25,239] 这个东西我好牛逼啊
[00:00:25,239 -> 00:00:27,039] 你们快来看看我是怎么写出来的
[00:00:27,039 -> 00:00:28,199] 然后现在就是说
[00:00:00,000 -> 00:00:03,439] 大家怎么样子把一起把这个东西做得更好
[00:00:04,160 -> 00:00:04,960] 是的是的
[00:00:05,160 -> 00:00:08,759] 嗯那这我还是想让他回到那个上就是那个协议
[00:00:08,800 -> 00:00:11,759] 如果我的协议是我拥有这个的使用权
[00:00:11,960 -> 00:00:14,759] 啊那那其他人还有动机去来contribute吗
[00:00:15,880 -> 00:00:17,480] 呃其实是有的
[00:00:17,519 -> 00:00:20,199] 就contribute的动机可以有很多不一样的
[00:00:20,199 -> 00:00:22,719] 比如说很多在校大学生他参与这个
[00:00:23,199 -> 00:00:25,280] 呃开源的他作为开源contributor
[00:00:25,280 -> 00:00:27,839] 他可能第一目的是为了锻炼自己的技术
[00:00:00,000 -> 00:00:07,200] 了解整个这个开源的一些标准啊,以及就是代码的一些规范啊,在这里实际上是有很多收获的。
[00:00:07,200 -> 00:00:12,800] 就是至少是可以写简历的,这是最基本最基本的收获,这个就是很大的一个群体。
[00:00:12,800 -> 00:00:28,199] 再一个就是有很多人他就是对技术有很很强的这个狂热,就虽然我就是为了技术本身为了做出我的贡献,所以他会去参与这个开源,不见得真的要把我贡献的代码再拿出来用到某些商业的软件。
[00:00:00,000 -> 00:00:05,000] 哪怕别人哪怕别人拿着这个贡献去赚钱也可以
[00:00:05,740 -> 00:00:09,939] 是的,但是这听起来不就是一个现成的发币的模式吗?
[00:00:09,939 -> 00:00:14,640] 就是大家来贡献,然后按照贡献程度来分成最后分
[00:00:16,039 -> 00:00:20,079] 啊对,暂时可能还没有真的,比如说最后商业化
[00:00:20,079 -> 00:00:22,920] 怎么就能把这些钱分给当初的contractor
[00:00:22,960 -> 00:00:25,079] 这也许是一个值得研究的方向是吧
[00:00:25,879 -> 00:00:28,160] 这听起来就是一个真的很现成的生意模式
[00:00:00,000 -> 00:00:04,320] 然后那行,那投资人们你们告诉我为什么这个事情没有这样做
[00:00:04,320 -> 00:00:08,359] 嗯,我们这就不聊了啊,就不聊博商业的东西了
[00:00:08,359 -> 00:00:11,039] 我们还是先聊这个开源的这个东西本身吧
[00:00:11,400 -> 00:00:14,320] 嗯,他因为所有东西是开源的
[00:00:14,320 -> 00:00:15,759] 你能看到他写的东西
[00:00:15,759 -> 00:00:17,679] 那你写的东西的这个质量说实话
[00:00:17,679 -> 00:00:19,359] 我觉得就应该是啊
[00:00:19,359 -> 00:00:20,199] 你为了写这个东西
[00:00:20,199 -> 00:00:21,359] 你的质量是有保障的
[00:00:21,359 -> 00:00:21,640] 对吧
[00:00:21,640 -> 00:00:23,359] 就是因为要给大家来看
[00:00:23,559 -> 00:00:25,640] 然后也有这样的炫耀的动机
[00:00:25,760 -> 00:00:28,280] 那除了这种就是纯基础的东西
[00:00:00,000 -> 00:00:02,680] 和刚才说的那些商业东西
[00:00:02,680 -> 00:00:06,200] 那其他还有没有什么其他的就是这个开源这件事情
[00:00:06,200 -> 00:00:07,519] 对于个人来说的意义
[00:00:07,519 -> 00:00:11,199] 对于个人来说我觉得基本上就是这几个意义
[00:00:11,199 -> 00:00:15,640] 而且就这里面实际上炫技是很重要的一个意义
[00:00:15,640 -> 00:00:21,280] 我觉得就是这是给很多人一种自我实现的感觉
[00:00:21,280 -> 00:00:22,879] 尤其是在技术社区里
[00:00:22,879 -> 00:00:25,160] 就是如果真的很多人来用我的软件的话
[00:00:25,160 -> 00:00:26,719] 我是非常开心的
[00:00:00,000 -> 00:00:03,000] 那你在这里边是一个非常成功的累积
[00:00:03,000 -> 00:00:06,360] 要不我们稍微讲讲你的个人的这个经历吧
[00:00:06,360 -> 00:00:07,799] 就是嗯对
[00:00:07,799 -> 00:00:10,519] 你因为我刚刚就给大家一个非常简单的介绍
[00:00:10,519 -> 00:00:14,080] 你可不可以给大家一个你的简短的人生的介绍
[00:00:14,320 -> 00:00:16,440] 在你上面 可以可以可以
[00:00:17,000 -> 00:00:19,440] 那我是从
[00:00:20,000 -> 00:00:23,199] 我是15年申请的PhD过来
[00:00:23,199 -> 00:00:26,640] 然后真正接触到这个
[00:00:00,000 -> 00:00:03,720] 我这个开发软件这个领域叫自动化机器学习
[00:00:03,720 -> 00:00:07,040] 真正接触到这个topic是在也叫AutoML
[00:00:07,040 -> 00:00:09,400] 接触到这个topic是在16年的时候
[00:00:09,400 -> 00:00:13,880] 实际上我当时那个假期那个暑假就是在积极地找实习嘛
[00:00:13,880 -> 00:00:18,079] 但是在我拿到了当时我已经拿到了微软的offer
[00:00:18,079 -> 00:00:20,000] 我已经准备要去了的时候
[00:00:20,000 -> 00:00:22,440] 但这时候我就突然听到了这样一个
[00:00:22,440 -> 00:00:24,120] 我导师这边接到了一个新的项目
[00:00:24,120 -> 00:00:27,320] 然后我就仔仔细细地看了这个项目
[00:00:00,000 -> 00:00:03,080] 感觉还是非常有意义 非常有潜力的一个项目
[00:00:03,080 -> 00:00:07,320] 就是关于自动化机器学习 当时是美国的很多高校都有参与
[00:00:07,320 -> 00:00:09,519] 大约有二三十所高校参与的一个项目
[00:00:09,519 -> 00:00:14,560] 就每个人做其中一小块 既有后端的很多机器学习的算法
[00:00:14,560 -> 00:00:17,879] 也有这个自动化选取这个模型的这个算法
[00:00:17,879 -> 00:00:20,839] 也有前端和用户交互的这个网页界面
[00:00:20,839 -> 00:00:22,440] 就有不同的team在里面
[00:00:22,440 -> 00:00:23,519] different roles
[00:00:23,519 -> 00:00:28,239] 然后我们就是负责做
[00:00:00,000 -> 00:00:06,599] 如果有一些Machine Learning Background的小伙伴可能能深深地感受一些
[00:00:06,599 -> 00:00:07,679] 可能是有点
[00:00:07,679 -> 00:00:10,480] 就更能感受到一些就是
[00:00:10,480 -> 00:00:14,439] AutoML自动化机器学习主要解决的问题就是
[00:00:14,439 -> 00:00:16,280] 它要降低机器学习的使用门槛
[00:00:16,280 -> 00:00:20,179] 以及让现有的机器学习工程师的效率获得最大的提升
[00:00:20,179 -> 00:00:25,019] 就希望他们不要把大量的时间浪费在调那些不重要的参数上
[00:00:25,019 -> 00:00:28,219] 或者是写这个实验代码怎么样能把这个东西run十遍
[00:00:28,219 -> 00:00:29,219] 然后选择最好的
[00:00:00,000 -> 00:00:02,319] 你不要把时间浪费在这种事情上
[00:00:02,919 -> 00:00:04,240] 这是一个目的
[00:00:04,240 -> 00:00:05,320] 再一个就是降低他们卡
[00:00:05,320 -> 00:00:08,519] 就是说你可能甚至不需要知道
[00:00:08,519 -> 00:00:10,039] 你最终用了什么model
[00:00:10,679 -> 00:00:11,439] 用了什么模型
[00:00:11,439 -> 00:00:12,640] 我只要把所有的
[00:00:12,640 -> 00:00:14,880] 我认为根据你的数据机分析出来的
[00:00:15,080 -> 00:00:17,440] 对你这个任务最好的模型选好了
[00:00:17,440 -> 00:00:18,320] 把参数调好了
[00:00:18,320 -> 00:00:19,879] 模型交给你就可以了
[00:00:19,879 -> 00:00:22,359] 因为最终部署这个模型是你最终解决问题
[00:00:22,359 -> 00:00:23,760] 是你最终的目的
[00:00:23,760 -> 00:00:26,280] 就是你甚至不需要知道用了什么
[00:00:26,280 -> 00:00:27,399] 这就是自动化技术
[00:00:27,399 -> 00:00:29,160] 这个东西本身也特别有意思
[00:00:00,000 -> 00:00:02,279] 因为我不是也做了很多这个ML的模型吗?
[00:00:02,279 -> 00:00:06,160] 然后可能回头采访你和李牧大神,然后来讲讲他对
[00:00:06,160 -> 00:00:10,880] AutoML的见解。不过可以先先先先先先说开源吧,我们就先说开源。
[00:00:10,880 -> 00:00:16,000] 嗯,嗯,好的,好的,呃,然后我我当时就觉得这个项目是非常的
[00:00:16,000 -> 00:00:20,640] 有意义,也非常的有潜力,而且那个时候还挺早的,16年
[00:00:20,640 -> 00:00:23,679] 就是我觉得自动化机器学习这概念还没有被炒起来。
[00:00:23,679 -> 00:00:27,559] 那时候大约也就有2-3天比较有影响力的关于
[00:00:00,000 -> 00:00:02,399] 既是深度学习又是自动环境学习
[00:00:02,399 -> 00:00:06,599] 所以我当时就果断放弃了这个去微软实习的机会
[00:00:06,599 -> 00:00:09,800] 然后就用那个假期开始就加入了这个项目里
[00:00:09,800 -> 00:00:11,839] 但是做这个项目实际上
[00:00:11,839 -> 00:00:13,519] 这个项目的所有的代码都开源了
[00:00:13,519 -> 00:00:15,439] 但是做这个项目的时候
[00:00:15,439 -> 00:00:19,359] 那个时候还没有完全想到要做这个AutoCadast这个软件
[00:00:19,359 -> 00:00:21,359] 是到了17年底
[00:00:21,359 -> 00:00:23,559] 我在开一次学术会议的时候
[00:00:23,559 -> 00:00:25,920] 我不知道大家开学会议有没有这种经历
[00:00:25,920 -> 00:00:29,120] 就是你明明坐在一个场子里听他的讲座
[00:00:00,000 -> 00:00:03,200] 但是实际上你有点,有时候有点听不进去,就是实际上在
[00:00:03,839 -> 00:00:07,240] 神游天外,对,在想一些别的东西
[00:00:07,240 -> 00:00:11,000] 这时候我就突然就想到了这么一个idea
[00:00:11,000 -> 00:00:16,920] 就是为什么所有的shadow model的东西都有自动化机器学习的core
[00:00:16,920 -> 00:00:22,079] 都有,比如说Auto SK-Learn,Auto WECO,都已经做得很好,很成熟了
[00:00:22,079 -> 00:00:26,480] 但是深度学习已经火了这么久,大家都看到深度学习这个风口
[00:00:00,000 -> 00:00:07,639] 但是居然没有一个大认可的深度学习的自动化学习的库出来
[00:00:07,639 -> 00:00:12,279] 所以就当时就是突然想到这个idea的时候
[00:00:12,279 -> 00:00:14,619] 其实不是一个很难想的idea
[00:00:14,619 -> 00:00:16,719] 但是我刚想到就感觉非常的shock
[00:00:16,719 -> 00:00:19,079] 居然还没有人做
[00:00:19,079 -> 00:00:21,760] 对是我也在想为什么
[00:00:21,760 -> 00:00:25,800] 对我觉得主要还是因为这个topic当时还是
[00:00:25,800 -> 00:00:28,059] 就是automail这个topic还是没有起来
[00:00:28,059 -> 00:00:29,559] 知道的人还是比较少
[00:00:00,000 -> 00:00:04,139] 然后想到了这个topic
[00:00:04,139 -> 00:00:07,099] 我立即我就出了会场
[00:00:07,099 -> 00:00:09,380] 我就没有再继续听lecture
[00:00:09,380 -> 00:00:13,220] 然后就出来拿着电脑在网上把相关的东西都查了一遍
[00:00:13,220 -> 00:00:14,619] 看到底是有没有人做
[00:00:14,619 -> 00:00:17,620] 然后确定了这个结论就是没有
[00:00:17,620 -> 00:00:20,260] 然后就紧接着给他定名字
[00:00:20,260 -> 00:00:22,260] 我们就定了AutoKeras
[00:00:22,260 -> 00:00:25,820] 因为Keras这个名字还是很有认知度
[00:00:25,820 -> 00:00:28,059] 而且大家对他的印象就是简单好用
[00:00:00,000 -> 00:00:03,600] 感觉有点撞别人的这个logo的感觉
[00:00:03,600 -> 00:00:09,359] 对对对 而且这一点是对后来这个软件的发展起了决定性的作用
[00:00:09,359 -> 00:00:13,400] 对 就是真的就必须要撞这个logo才可以
[00:00:13,400 -> 00:00:15,400] 对
[00:00:15,400 -> 00:00:18,679] 然后紧接着我就赶紧把这个能注册的东西全注册了
[00:00:18,679 -> 00:00:21,239] 比如说PyPad的download的那个名字
[00:00:21,239 -> 00:00:23,239] 然后Github的repo的名字
[00:00:23,239 -> 00:00:28,480] 然后域名网络这个autocadres.com这个名字
[00:00:00,000 -> 00:00:05,839] 然后对对对就是当天以最快的速度所有的都注册了
[00:00:05,839 -> 00:00:10,439] 然后反正当时我就感觉到一种紧迫感
[00:00:10,439 -> 00:00:12,560] 你知道吧为什么这么简单的一个idea没有人做
[00:00:12,560 -> 00:00:13,480] 也没有人想到
[00:00:13,480 -> 00:00:15,279] 我就感觉这个随时也有可能被人做了
[00:00:15,279 -> 00:00:17,760] 等等啊你在这你说简单
[00:00:17,760 -> 00:00:20,000] 大家听起来把一个这个深度
[00:00:20,000 -> 00:00:23,280] 把一个深度就是自动化自动化深度学
[00:00:23,280 -> 00:00:26,039] 深度深度学习是一个很难的事情
[00:00:26,039 -> 00:00:28,239] 但是你觉得是一个很简单的事情
[00:00:00,000 -> 00:00:03,299] 是不是你当时做的东西的难度其实远超这个项目的事
[00:00:04,440 -> 00:00:08,439] 我的意思是说首先这个idea很容易想到
[00:00:08,439 -> 00:00:12,980] 其次是如果你做一个非常难易的solution的话
[00:00:12,980 -> 00:00:13,939] 还是很简单的
[00:00:13,939 -> 00:00:16,579] 比如说就是一下然后拿出来最简单
[00:00:16,579 -> 00:00:18,379] 你就写一个富尔循环
[00:00:18,379 -> 00:00:19,920] 然后循环几个model
[00:00:19,920 -> 00:00:21,660] 然后最后选出一个好的
[00:00:21,660 -> 00:00:27,620] 然后返回就是你至少可以先把这个知识产权给占住
[00:00:00,000 -> 00:00:03,439] 是吧,想着这个idea把它给站住是没有问题的
[00:00:03,439 -> 00:00:06,540] 就是这是我当时认为它比较简单的地方
[00:00:06,540 -> 00:00:10,480] 所以就是当然你要做的好还是非常难的
[00:00:10,480 -> 00:00:12,679] 甚至就到现在我认为没有任何一个库
[00:00:12,679 -> 00:00:14,779] 它真正把这个问题解决的很好
[00:00:14,779 -> 00:00:17,480] 你觉得它是一个可能被解决的很好的问题吗
[00:00:17,480 -> 00:00:21,679] 在可以预见的未来它没有办法被完全解决
[00:00:21,679 -> 00:00:25,960] 但是它可以采用很多的work around来解决
[00:00:25,960 -> 00:00:27,800] 我们稍稍再说一丢丢吧
[00:00:00,000 -> 00:00:03,240] 就是你说的所谓完全解决什么意思
[00:00:03,240 -> 00:00:08,400] 然后因为我以为所谓的解决就是给这个做深度学习的人
[00:00:08,400 -> 00:00:11,320] 提高他们的效率就是解决了
[00:00:11,320 -> 00:00:12,359] 在我看来
[00:00:12,359 -> 00:00:17,120] 不是这个最终的目的还是希望我们一个工程师或者是数学科学家吧
[00:00:17,120 -> 00:00:21,760] 他只需要提供数据并且定义他最终要解决的问题
[00:00:22,640 -> 00:00:26,640] 这是为为二的两个input进入这个自动化进行学习
[00:00:26,640 -> 00:00:28,440] 然后output就是一个可能的矛盾
[00:00:00,000 -> 00:00:03,279] 好的,那现在能解决到什么程度呢?
[00:00:03,279 -> 00:00:08,679] 现在可以给一个reasonable的model,acceptable的model
[00:00:08,679 -> 00:00:13,039] 就是让你差不多能用,就是相当于给了你一次快速的实验机会
[00:00:13,039 -> 00:00:16,000] 让你知道大概什么样的model适合,什么样的model不适合
[00:00:16,000 -> 00:00:20,000] 然后你根据这个反馈可以进一步的再进行更详细的研究
[00:00:20,000 -> 00:00:25,120] 或者是我不需要一个best model,我只需要一个80%model
[00:00:25,120 -> 00:00:28,559] 对,如果这样,那就基本上解决了
[00:00:00,000 -> 00:00:02,359] 就是如果你这个task不是太诡异
[00:00:02,359 -> 00:00:03,799] 就是比较常见的task
[00:00:04,200 -> 00:00:04,599] 好的
[00:00:04,599 -> 00:00:07,599] 我们回头再去聊这个就是这个具体吧
[00:00:07,599 -> 00:00:10,160] 你记得那个李牧子写了一个就是两行code
[00:00:10,160 -> 00:00:12,400] 打败了多少个数据科学对对对
[00:00:12,400 -> 00:00:13,400] 这个科学家那个
[00:00:13,400 -> 00:00:15,519] 我们回头再说那些吧
[00:00:15,519 -> 00:00:16,000] 对
[00:00:16,000 -> 00:00:19,519] 那那就是回到这个本身
[00:00:19,519 -> 00:00:21,000] 你把这个域名抢住了
[00:00:21,000 -> 00:00:24,320] 然后去应该是做了一些比较基础的工作
[00:00:24,320 -> 00:00:27,120] 然后这个项目什么时候开始起来的呢
[00:00:00,000 -> 00:00:05,919] 差不多是18年的8月
[00:00:05,919 -> 00:00:08,599] 就差不多是一年时间
[00:00:08,599 -> 00:00:10,640] 就是做了一年时间之后
[00:00:10,640 -> 00:00:12,720] 突然收到了媒体的报道
[00:00:12,720 -> 00:00:15,320] 对对对我们
[00:00:15,759 -> 00:00:17,559] 我觉得至今为止
[00:00:17,559 -> 00:00:20,359] 我们似乎没有进行过任何主动的宣传
[00:00:20,359 -> 00:00:23,640] 除了在会议上就邀请我们做lecture这种
[00:00:23,640 -> 00:00:26,039] 我们可能会讲一讲提到这个
[00:00:26,039 -> 00:00:27,280] 但是我们没有主
[00:00:27,280 -> 00:00:29,039] 几乎没有主动联系过任何媒体
[00:00:00,000 -> 00:00:01,480] 去主动做这个PR
[00:00:01,480 -> 00:00:02,680] 你们发现你们的
[00:00:03,359 -> 00:00:06,599] 这个还是挺神奇的一件事情
[00:00:06,599 -> 00:00:09,560] 就是在我们那个项目开始了
[00:00:09,560 -> 00:00:11,599] 大约三个月左右的时间
[00:00:12,080 -> 00:00:13,640] 谷歌就已经推出了一套
[00:00:13,640 -> 00:00:15,640] 突然推出了一套成熟的
[00:00:15,679 -> 00:00:17,120] 面向企业服务的
[00:00:17,120 -> 00:00:17,879] Alternet系统
[00:00:17,920 -> 00:00:19,000] 在它的云服务上
[00:00:19,399 -> 00:00:20,879] 就是叫Google Alternet
[00:00:21,519 -> 00:00:22,719] 但是紧接着
[00:00:22,719 -> 00:00:24,600] 对我听说这个就是
[00:00:25,000 -> 00:00:26,000] 就是那个时候
[00:00:26,000 -> 00:00:27,960] 就是也是亚马逊推荐的
[00:00:27,960 -> 00:00:29,760] 那个叫什么SageMaker
[00:00:00,000 -> 00:00:02,000] 差不多那个时候对
[00:00:02,000 -> 00:00:08,000] 对然后这个就实际上一下就把这个topic给带火了
[00:00:08,000 -> 00:00:11,339] 就是这是因为谷歌的这个宣传力还是非常大的
[00:00:11,339 -> 00:00:13,140] 他推什么东西一下这个topic就能火
[00:00:13,140 -> 00:00:16,640] 火了之后很多人就发现了一个问题
[00:00:16,640 -> 00:00:18,480] 就是他的收费有点高
[00:00:18,480 -> 00:00:20,780] 至少当时的收费还是很高
[00:00:20,780 -> 00:00:22,519] 现在有可能策略已经调整了
[00:00:22,519 -> 00:00:23,820] 价钱已经有所下降
[00:00:23,820 -> 00:00:25,179] 但当时的收费是非常高的
[00:00:25,179 -> 00:00:26,679] 因为他还在一个实验阶段
[00:00:00,000 -> 00:00:06,320] 然后就会有很多的媒体人试图去报道这种事情
[00:00:06,320 -> 00:00:10,619] 因为就是完全科技大厂也经常会被这些媒体批评
[00:00:10,619 -> 00:00:15,320] 所以这时候他们就想办法怎么来批评
[00:00:15,320 -> 00:00:18,219] 谷歌这个Alternail收费过高的问题
[00:00:18,219 -> 00:00:20,859] 那其中最好的一个办法就是找到一个
[00:00:20,859 -> 00:00:24,760] Open Source Alternative来对它进行批评
[00:00:24,760 -> 00:00:28,199] 所以这就是为什么那一年在那个时候
[00:00:00,000 -> 00:00:03,960] 谷歌这个推出了差不多半年多的时间,然后有一个媒体
[00:00:03,960 -> 00:00:08,759] 来对我们的项目进行了报道,然后这个项目就起来差不多是这个
[00:00:08,759 -> 00:00:13,480] 嗯,然后你们这也是通过这个东西被谷歌注意到了是吗?
[00:00:13,480 -> 00:00:21,480] 啊,其实最终跟这个Keras团队的联系是我已经又过了半年时间
[00:00:21,480 -> 00:00:26,079] 啊,也没有那么久,没有那么久,又过了一到两个月时间,我开始找实习
[00:00:00,000 -> 00:00:02,000] 开始找下一个暑假实习的时候
[00:00:02,000 -> 00:00:06,759] 这时候我就是要给很多大佬发邮件
[00:00:06,759 -> 00:00:09,000] 然后问他们有没有这个实习机会啊
[00:00:09,000 -> 00:00:13,199] 这时候我接触了这个Google的Keras团队
[00:00:13,199 -> 00:00:16,000] 但实际上之前媒体报道那时候
[00:00:16,000 -> 00:00:18,199] 这个Keras支付就已经背书了
[00:00:18,199 -> 00:00:20,000] 差不多相当于背书了我们这个项目
[00:00:20,000 -> 00:00:21,800] 转发并评论了我们这个项目
[00:00:21,800 -> 00:00:23,800] 他是知道我们这个项目的存在
[00:00:23,800 -> 00:00:25,399] 所以那时候我跟他取得联系
[00:00:25,399 -> 00:00:28,199] 就直接拿到了这个实习机会并展开了这个合作
[00:00:00,000 -> 00:00:03,960] 我那我这儿就是前面那个有有有有两个没有没有
[00:00:03,960 -> 00:00:07,719] 完结的话题啊,我来继续问一下,就是第一呢,就是谷歌
[00:00:07,719 -> 00:00:11,599] 出了这个automail以后对你来说是一个生存的危机感吗?
[00:00:11,599 -> 00:00:15,720] 因为大厂就是自己下场已经出了一个很成熟的
[00:00:15,720 -> 00:00:19,920] solution了,就是你觉得你的同时延伸的话题就是你
[00:00:19,920 -> 00:00:21,519] 那个时候你这个项目做到什么程度了?
[00:00:21,519 -> 00:00:25,879] 就是你作为一个开源软件的这种单打独斗
[00:00:00,000 -> 00:00:03,439] 要呃的人或者说不是就是就是啊
[00:00:04,040 -> 00:00:06,540] 一个community吧一群啊一群游击队
[00:00:06,839 -> 00:00:08,199] 然后遇到正规军的时候
[00:00:08,199 -> 00:00:10,380] 你们觉得你们的这个项目质量和那个
[00:00:10,380 -> 00:00:11,300] auto ml比
[00:00:11,500 -> 00:00:12,500] 在那个时刻
[00:00:12,699 -> 00:00:15,039] 呃大概是一个什么样的程度的比较
[00:00:16,699 -> 00:00:18,300] 呃我觉得在
[00:00:19,239 -> 00:00:21,879] 我们首先我们覆盖的任务
[00:00:22,399 -> 00:00:23,399] 数量是非常少的
[00:00:23,399 -> 00:00:25,980] 我们只focus在几个小的任务上
[00:00:26,140 -> 00:00:27,739] 就几个最常见的任务上
[00:00:27,879 -> 00:00:29,739] 在这几个任务上我们
[00:00:00,000 -> 00:00:05,000] 应该不照这在benchmark data center肯定是不照
[00:00:05,000 -> 00:00:07,639] Google的服务要查
[00:00:07,639 -> 00:00:11,740] 因为后来也有几篇论文出来
[00:00:11,740 -> 00:00:13,779] 就真的比较了我们开源的
[00:00:13,779 -> 00:00:16,820] 人家和Google的开了服务
[00:00:16,820 -> 00:00:19,179] 不是开了Google的那个奥特曼的服务
[00:00:19,179 -> 00:00:20,719] 就我们自己都没比过
[00:00:20,719 -> 00:00:22,359] 就因为真的还挺贵的
[00:00:22,359 -> 00:00:24,519] 但是有些团队花的起那个钱
[00:00:24,519 -> 00:00:25,359] 他们就真的比了
[00:00:25,359 -> 00:00:27,359] 就还不错
[00:00:27,359 -> 00:00:28,359] 看起来还不错
[00:00:00,000 -> 00:00:06,339] 但是主要的问题就是实际上我们最大的竞争对手并不是Google
[00:00:06,339 -> 00:00:09,439] 因为Google是不可能把它的这个企业级的服务开源了
[00:00:09,439 -> 00:00:10,980] 所以
[00:00:10,980 -> 00:00:14,679] 那现在开源了这个我们又是一个话题了到后面再聊
[00:00:14,679 -> 00:00:15,080] 对
[00:00:15,080 -> 00:00:21,480] 所以我们真正的竞争对手是其他用开源来做这个
[00:00:21,480 -> 00:00:22,920] out of mail的startup
[00:00:22,920 -> 00:00:26,019] 我们要做的比他们强才行
[00:00:26,019 -> 00:00:28,719] 因为我们都是在我们都是开源的solution
[00:00:00,000 -> 00:00:04,960] 就是用企业级服务和用开源solution的应该几乎不是同一个群体
[00:00:04,960 -> 00:00:07,200] 好这是我明白了
[00:00:07,200 -> 00:00:09,599] 就是企业级服务这个东西
[00:00:09,599 -> 00:00:12,039] 这个又是一个特别大的话题
[00:00:12,039 -> 00:00:13,119] 我觉得我们要很了解的
[00:00:13,119 -> 00:00:13,839] 好
[00:00:13,839 -> 00:00:16,239] 就是那我们回头把你的经历讲完了以后
[00:00:16,239 -> 00:00:18,239] 我们后面会问的这些问题是什么
[00:00:18,239 -> 00:00:23,280] 就是尤其是有一些最近的这些投资人们会非常感兴趣的话题
[00:00:23,280 -> 00:00:28,359] 就是因为有很多用开源做startup的这些公司
[00:00:00,000 -> 00:00:02,520] 包括现在很火的一些公司他们的这个背后的
[00:00:02,520 -> 00:00:03,919] solution其实都是开源的
[00:00:03,919 -> 00:00:04,440] 对吧
[00:00:04,440 -> 00:00:09,640] 你们听起来当时也有一个用开源做startup的可能性
[00:00:09,640 -> 00:00:12,519] 但是你们选择把它不知道是卖给了google呢
[00:00:12,519 -> 00:00:13,759] 还是并给了google
[00:00:13,759 -> 00:00:15,560] 那我们这些到后面再聊
[00:00:15,560 -> 00:00:19,960] 以及就是怎么为什么就是一些散兵游勇吧
[00:00:19,960 -> 00:00:24,600] 应该说他能这个做出来一个和这个google一个大厂
[00:00:24,600 -> 00:00:25,480] 一线大厂
[00:00:25,480 -> 00:00:27,600] 在一个顶尖技术
[00:00:27,600 -> 00:00:29,839] 我觉得大家说这个应该没有问题
[00:00:00,000 -> 00:00:02,960] 就是说深度学习啊自动化深度学习应该算是一个
[00:00:02,960 -> 00:00:05,759] 比较顶尖的技术吧能做到相似的效果
[00:00:06,000 -> 00:00:09,800] 就对吧就是Google不管是算力资源还是这个数据
[00:00:09,800 -> 00:00:11,679] 都是有碾压的优势的
[00:00:11,720 -> 00:00:13,439] 但是为什么能做到相似的效果
[00:00:13,439 -> 00:00:17,960] 是这个背后的这个技术就enable大家可以做到相似效果吗
[00:00:19,399 -> 00:00:20,839] 这个也值得讨论一下
[00:00:20,879 -> 00:00:24,079] 但是我们还是先回到你的这个经历
[00:00:24,239 -> 00:00:27,839] 就是你觉得当时autoML出了以后
[00:00:00,000 -> 00:00:03,759] 对你们来说其实是一个booster而不是一个competition
[00:00:04,000 -> 00:00:06,040] 因为大家对这个领域感兴趣了
[00:00:06,040 -> 00:00:07,360] 但是他们又肯定不开源
[00:00:07,360 -> 00:00:10,800] 所以说其实你们对你们来说是一件好事
[00:00:10,800 -> 00:00:13,919] 而且那个时候就在最后再聊一个吧
[00:00:13,919 -> 00:00:15,960] 就是那个Keras支付是怎么找到你们的
[00:00:16,640 -> 00:00:19,879] 是我在找实习的时候给他发了邮件
[00:00:20,239 -> 00:00:22,239] 然后他就表示很感兴趣
[00:00:22,239 -> 00:00:24,920] 接下来我们就谈了看看能不能合作
[00:00:24,920 -> 00:00:28,160] 能不能把这个软件直接放到这个Keras
[00:00:00,000 -> 00:00:02,000] 这个生态系统里面和他其他的
[00:00:02,000 -> 00:00:03,000] 他感兴趣也是因为
[00:00:03,000 -> 00:00:05,240] 他感兴趣也是因为看了这个项目以后
[00:00:05,240 -> 00:00:08,039] 认可了你的这个项目的质量是吧
[00:00:08,439 -> 00:00:11,439] 对对对就是在我们收到第一波媒体报道的时候
[00:00:11,439 -> 00:00:13,400] 他实际上在推特上是很活跃的
[00:00:13,400 -> 00:00:14,839] 他也算是一个大V
[00:00:14,839 -> 00:00:17,519] 在那时候他就已经转发评论了这个项目
[00:00:17,519 -> 00:00:19,160] 所以他是一直知道我们的作品
[00:00:19,160 -> 00:00:20,120] 评论是什么
[00:00:20,719 -> 00:00:22,679] 这个人撞logo不要脸
[00:00:22,719 -> 00:00:26,559] 他没有没有没有就是interesting project
[00:00:26,920 -> 00:00:29,079] 总结成一句话就是interesting project
[00:00:29,079 -> 00:00:29,839] 好的
[00:00:00,000 -> 00:00:02,000] 然后你接着去实习了是吧
[00:00:02,759 -> 00:00:06,360] 对也就是正式和谷歌合作开始
[00:00:07,040 -> 00:00:10,880] 那我这就直接fast forward到现在
[00:00:10,880 -> 00:00:13,560] 就是你的项目
[00:00:13,560 -> 00:00:16,679] 但是在这过程中我就想问你的现在的项目是
[00:00:16,679 -> 00:00:21,359] 你卖给谷歌还是直接就是你被你个人
[00:00:21,359 -> 00:00:23,960] 就是这个等等你们的项目的协议
[00:00:23,960 -> 00:00:25,559] 从一开始的协议是个什么样子的
[00:00:25,559 -> 00:00:27,399] 它可以被商业化的应用吗
[00:00:00,000 -> 00:00:03,000] 对可以了我们就是一个完全开放的协议
[00:00:03,000 -> 00:00:07,679] 就是你要不再给我们介绍一下开源有几种比较大的协议吧
[00:00:07,679 -> 00:00:11,080] 就是现在最常见的三个协议
[00:00:11,080 -> 00:00:12,279] 两个协议吧
[00:00:12,279 -> 00:00:16,640] 就我认为MIT协议和那个阿帕奇可以认为它是一类的
[00:00:16,640 -> 00:00:18,719] 就是完全开放的一个协议
[00:00:18,719 -> 00:00:22,719] 在一个family可以认为是GPL协议
[00:00:22,719 -> 00:00:25,320] 就是Linux操作系统用的那个协议
[00:00:25,320 -> 00:00:28,920] MIT和阿帕奇这个协议现在几乎Google
[00:00:00,000 -> 00:00:03,339] 就比如说TensorFlow之类的,用的都是Alpha7 2.0这个协议
[00:00:03,339 -> 00:00:07,280] 我们最开始用的MIT,但现在改成了Alpha7 2.0
[00:00:07,280 -> 00:00:11,179] 它就是完全开放所有你爱怎么用怎么用
[00:00:11,179 -> 00:00:13,179] 就我代码放在那,你爱怎么用怎么用
[00:00:13,179 -> 00:00:15,980] 我不对你做任何限制,是一个完全开放的协议
[00:00:15,980 -> 00:00:22,320] 然后GPL呢,就是你但凡用了我的,你就必须也要开源
[00:00:22,320 -> 00:00:27,559] 你就是你基于我的写的代码,我想看你必须给我,就这样
[00:00:00,000 -> 00:00:06,240] 嗯,我觉得现在大部分但凡是想通过这个开源扩大自己最大的影响力的话
[00:00:06,240 -> 00:00:11,339] 就追求是影响力的话,那基本上就要使用apache协议
[00:00:11,339 -> 00:00:14,480] 然后你刚说还有一些这个商业的协议
[00:00:14,480 -> 00:00:18,620] 啊,对,那些我不是特别熟悉
[00:00:18,620 -> 00:00:21,920] 就也有一些对知识产权保护的更好的
[00:00:21,920 -> 00:00:27,059] 而且也有一些比较有意思的个人开发者搞出来的协议
[00:00:00,000 -> 00:00:04,879] 比如说就你用我的软件,你必须得请我喝咖啡,
[00:00:04,879 -> 00:00:07,679] 你得请我喝啤酒这种还有这种协议。
[00:00:07,679 -> 00:00:10,679] 要喝死他,如果真的火。
[00:00:10,679 -> 00:00:18,239] 好,嗯,对,那请其实,呃,总之我们就是说有完全开放的有一些,
[00:00:18,239 -> 00:00:20,960] 就你刚说的其中一种都是这个纯开放的,对吧?
[00:00:20,960 -> 00:00:25,719] 它不是为了商业,只不过是一个强制要求我的这个继承者们也要
[00:00:00,000 -> 00:00:03,439] 这个子类们也要开放
[00:00:03,480 -> 00:00:05,240] 然后另外一个
[00:00:05,280 -> 00:00:07,320] 但是那些商业的我们不了解
[00:00:07,320 -> 00:00:09,439] 那我们回头再请一些就是比较了解
[00:00:09,439 -> 00:00:10,240] 这个商业化的人
[00:00:10,240 -> 00:00:11,519] 再讲讲商业这边的应用
[00:00:11,519 -> 00:00:14,880] 然后回到谷歌
[00:00:14,919 -> 00:00:17,760] 你现在其实是你应该是就是
[00:00:17,760 -> 00:00:21,039] 这个auto keras它并不属于谷歌的一部分
[00:00:21,039 -> 00:00:22,600] 也不属于keras的一部分
[00:00:22,640 -> 00:00:26,280] 而只不过是你作为一个这个项目的创始人
[00:00:26,280 -> 00:00:29,000] 和最主要的contributor
[00:00:00,000 -> 00:00:01,800] 现在as a Google employee
[00:00:01,800 -> 00:00:04,240] 然后再继续为这个社区做服务是这样吗
[00:00:05,360 -> 00:00:10,640] 这个很难定义它到底是谁的一部分
[00:00:10,679 -> 00:00:14,160] 因为但是能不能定义它不是谁的一部分
[00:00:14,160 -> 00:00:15,880] 就是能不能定义它不是谷歌的一部分
[00:00:16,679 -> 00:00:18,839] 也不能
[00:00:19,079 -> 00:00:22,480] 因为根据开源协议的规定
[00:00:22,760 -> 00:00:25,519] 是每一行代码是谁写的
[00:00:25,519 -> 00:00:26,800] 这个就归属于谁
[00:00:00,000 -> 00:00:03,960] 假如说我上一周还在Google实习
[00:00:03,960 -> 00:00:05,160] 这一周不在Google实习
[00:00:05,160 -> 00:00:07,799] 在实验室回到我们博士的那个实验室了
[00:00:07,799 -> 00:00:11,039] 那我上一周写的代码那几行就属于Google
[00:00:11,039 -> 00:00:14,039] 那我下一周回到我们实验室写的那几行代码
[00:00:14,039 -> 00:00:15,240] 就不属于Google
[00:00:15,240 -> 00:00:19,519] 但是现在整个Keras这个生态系统
[00:00:19,519 -> 00:00:22,879] 是依赖于这个Tensorflow比一个更大的生态系统
[00:00:22,879 -> 00:00:26,120] 所以我们可以粗略地认为这里面一切的
[00:00:26,120 -> 00:00:29,519] 就但凡在Keras Team这个Organization
[00:00:00,000 -> 00:00:03,399] 就GitHub上这个Organization下面的所有项目都属于Google
[00:00:03,940 -> 00:00:05,839] 如果粗略的人的话他们都属于Google
[00:00:05,839 -> 00:00:09,199] 是Google在运营的一些开源软件
[00:00:09,199 -> 00:00:13,640] 嗯Google在运营的一些开源软件
[00:00:13,640 -> 00:00:16,440] 但是我如果你想TensorFlow
[00:00:16,440 -> 00:00:18,480] 你刚刚说是iPad7 2.0的协议对吧
[00:00:18,480 -> 00:00:21,079] 那我就是不限制我的任何需要
[00:00:21,079 -> 00:00:23,559] 那如果说我拷贝一份然后自己来运营
[00:00:23,559 -> 00:00:24,559] 那也没问题
[00:00:24,559 -> 00:00:25,760] 是吗?对
[00:00:25,760 -> 00:00:26,960] 对是这样的
[00:00:26,960 -> 00:00:28,760] 就是他为什么要这么做呢
[00:00:00,000 -> 00:00:04,440] 这个也是一个所有商业开源的一个缩影
[00:00:04,440 -> 00:00:07,240] 就是为什么大厂花大量的资本
[00:00:07,240 -> 00:00:08,960] 雇这么多engineer去搞一个开源
[00:00:08,960 -> 00:00:10,199] 大家谁都可以用的东西
[00:00:10,199 -> 00:00:15,800] 因为现在这个代码它不是直接赚钱的方式
[00:00:15,800 -> 00:00:18,280] 它把代码开放出来
[00:00:18,280 -> 00:00:19,920] 把用户吸引过来
[00:00:19,920 -> 00:00:22,199] 把代码以上的生态建立起来
[00:00:22,199 -> 00:00:26,000] 比如说AutoCurios它就是在TensorFlow基础上建立出来的东西
[00:00:26,000 -> 00:00:26,519] 对吧
[00:00:26,519 -> 00:00:28,320] 就把这个很多人开发很多
[00:00:00,000 -> 00:00:02,240] 在這個基礎上建立出來很多其他的代碼
[00:00:02,240 -> 00:00:04,799] 首先是穩定了它這個生態
[00:00:04,799 -> 00:00:08,640] 就是大家不會很難輕易地遷移到另外一個生態去
[00:00:08,640 -> 00:00:10,880] 因為代碼已經是基於它開發出來
[00:00:10,880 -> 00:00:14,320] 第二點就是它能把在它上面這個生態
[00:00:14,320 -> 00:00:17,480] 你的所有其他的用戶開發者
[00:00:17,480 -> 00:00:20,719] 連接到它運營的服務上
[00:00:20,719 -> 00:00:21,800] 服務是可以收費的
[00:00:21,800 -> 00:00:23,600] 比如說Google Cloud
[00:00:23,600 -> 00:00:28,559] 我Google Cloud可以對TensorFlow做一個非常深度的整合
[00:00:00,000 -> 00:00:03,600] 我以最强的资源把TensorFlow支持的非常好
[00:00:03,600 -> 00:00:06,839] 那你如果需要很强的计算资源来跑TensorFlow的话
[00:00:06,839 -> 00:00:11,480] 那很多用户就会prefer直接交点钱在Google Cloud上跑
[00:00:11,480 -> 00:00:16,640] 那但是我背后的东西又是大家随意使用的
[00:00:16,640 -> 00:00:18,559] 那这里就有一个competition的问题
[00:00:18,559 -> 00:00:20,679] 他之所以他可以这么干
[00:00:20,679 -> 00:00:21,760] 别人也可以这么干对吧
[00:00:21,760 -> 00:00:24,480] 我完全可以出一个什么客代表flow
[00:00:24,480 -> 00:00:26,280] over service的客代表cloud
[00:00:26,280 -> 00:00:29,440] 然后支持TensorFlow比Google自己支持的还好
[00:00:00,000 -> 00:00:04,040] 对吧,然后我copy复制TensorFlow所有东西
[00:00:04,040 -> 00:00:08,240] 那这件事情没有发生是因为Google对它的竞争力完全自信吗
[00:00:08,240 -> 00:00:09,640] 就是它可以支持的最好
[00:00:09,640 -> 00:00:16,239] 对,首先是整个TensorFlow的所有engineer就在Google里面嘛
[00:00:16,239 -> 00:00:20,920] 你这个communication跟外界和跟内部的肯定是不一样的
[00:00:20,920 -> 00:00:26,280] 然后比如说cloud那边就可以给这边提一些feature request
[00:00:00,000 -> 00:00:02,399] 一定会比我们处理这些feature request
[00:00:02,399 -> 00:00:04,519] 肯定要比外界提的feature request要优先
[00:00:04,519 -> 00:00:05,320] 对
[00:00:05,320 -> 00:00:09,720] 再一个就是TensorFlow有一个特殊性
[00:00:09,720 -> 00:00:13,160] 就是它可以用硬件来锁定这个TensorFlow的服务
[00:00:13,160 -> 00:00:17,280] 就是TensorFlow对GPU对TPU的支持是非常好的
[00:00:17,280 -> 00:00:20,960] 但是TPU就是Google own的一个硬件
[00:00:20,960 -> 00:00:24,519] 它可以用这个硬件直接把你锁到Google的cloud上
[00:00:24,519 -> 00:00:26,519] 就其他也是没有的
[00:00:26,519 -> 00:00:28,199] 好的 我明白了
[00:00:28,199 -> 00:00:29,519] 我们稍稍总结一下这里
[00:00:00,000 -> 00:00:05,160] 就是它其实是代表了一个,正好我们后面也要聊一些开源的转变
[00:00:05,200 -> 00:00:08,199] 我觉得这就是一个挺重要的一个大家观念上的转变吧
[00:00:08,240 -> 00:00:11,439] 是整个背后商业商业逻辑的背后观念上的转变
[00:00:11,439 -> 00:00:14,960] 就是之前大家可能以为我的技术是呼声盒对吧
[00:00:14,960 -> 00:00:16,000] 我做出来一个软件
[00:00:16,000 -> 00:00:19,280] 然后我这个本身它是独一无二的
[00:00:19,280 -> 00:00:22,160] 然后你想去做一个一模一样的东西出来非常难
[00:00:22,359 -> 00:00:25,160] 然后所以我保护起来我的software我的人代码
[00:00:25,160 -> 00:00:27,519] 然后就可以打造一个呼声盒
[00:00:00,000 -> 00:00:04,240] 但是现在大家发现这样子的话,他虽然可能可以,但是你的adoption比较少
[00:00:04,240 -> 00:00:09,240] 大家并不一定愿意使用你,同时你的这个影响力啊,生态做起来比较慢
[00:00:09,240 -> 00:00:11,519] 其实大家也可以看到,就比如说这个微软
[00:00:11,519 -> 00:00:16,320] 他在上面就是开发一个软件,他的现在这个就是生怎么说呢?
[00:00:16,320 -> 00:00:21,480] 就是大家适配的很强,当你有垄断能力的时候,这个可能大家都要不得不来适配你
[00:00:21,480 -> 00:00:25,280] 但是看到了windows也能看到一大堆其他乱七八糟的操作系统
[00:00:25,280 -> 00:00:27,039] 就是没有人去适配他们的,对吧?
[00:00:00,000 -> 00:00:04,919] 包括手机上使用,我随便说啊,大概就是这种感觉啊。
[00:00:04,919 -> 00:00:10,759] 那我们把这个开放出来了以后,我基于对自己这个在这个
[00:00:10,759 -> 00:00:25,000] 上面提供其他服务能力的自信来去赚钱,然后我的护身盒在于我能提供更好的东西,而不是我提供一个do you want的东西啊,那其实本身就是一个更健康的竞争。
[00:00:00,000 -> 00:00:04,540] 对就是这个转变如果归结成一句话的话
[00:00:04,540 -> 00:00:11,640] 那就是从卖软件本身到变成了卖基于这个软件的服务
[00:00:11,640 -> 00:00:13,640] 明白明白明白
[00:00:13,640 -> 00:00:17,039] 嗯那其实可以把蛋糕做的大很多可能
[00:00:17,039 -> 00:00:19,039] 对对
