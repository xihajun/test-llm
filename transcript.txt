[00:00:00,000 -> 00:00:08,560] 大家好,今天我跟大家聊一下我來了Facebook以後覺得很讓我驚訝的一點
[00:00:08,560 -> 00:00:12,320] 就是在Facebook A B Testing是多麼容易做
[00:00:12,320 -> 00:00:17,120] 這個事情其實可能如果你只在Facebook工作的話
[00:00:17,120 -> 00:00:19,519] 你就覺得世界就應該是這個樣子的
[00:00:19,519 -> 00:00:24,559] 如果你在別的公司做了,你可能都想像不到A B Testing竟然可以這麼容易做
[00:00:24,559 -> 00:00:28,800] 那我從亞爾遜來到Facebook對我來說是一個還蠻吃驚的事情的
[00:00:00,000 -> 00:00:02,000] 大家有的时候没有充分理解
[00:00:02,000 -> 00:00:05,000] A B testing这么容易做到底会导致什么后果
[00:00:05,000 -> 00:00:07,000] 在我看来就是A B testing
[00:00:07,000 -> 00:00:10,000] 是导致Facebook的程序员特别爱加班
[00:00:10,000 -> 00:00:13,000] 和升值特别快的背后的推手
[00:00:13,000 -> 00:00:15,000] 包括整个Facebook现在公司文化
[00:00:15,000 -> 00:00:18,000] 就是比如说它会更扁平一点
[00:00:18,000 -> 00:00:22,000] 或者说大家更这个叫做meritocracy
[00:00:22,000 -> 00:00:24,000] 就是以这个结果来说话
[00:00:24,000 -> 00:00:26,000] 而不是以直击来说话
[00:00:26,000 -> 00:00:27,000] 比如说你在Facebook
[00:00:27,000 -> 00:00:28,000] 你是看不到其他人的直击的
[00:00:00,000 -> 00:00:04,000] 所以大家很多時候你要influence別人
[00:00:04,000 -> 00:00:06,000] 必須要靠你做出來的東西的結果
[00:00:06,000 -> 00:00:08,000] 而不是去靠誰的知己高
[00:00:08,000 -> 00:00:12,000] 或者說誰待的時間長來去說服別人
[00:00:12,000 -> 00:00:15,000] 這種meritocracy叫公司文化
[00:00:15,000 -> 00:00:18,000] 包括Facebook裡邊它很多東西特別透明
[00:00:18,000 -> 00:00:20,000] 比如說我的code誰都可以來search
[00:00:20,000 -> 00:00:21,000] 誰都可以來看
[00:00:21,000 -> 00:00:23,000] 我發的所有東西誰都可以來看
[00:00:23,000 -> 00:00:26,000] 這在有的公司其實是很難想像的
[00:00:26,000 -> 00:00:29,000] 我知道像有些公司你做出來的model
[00:00:00,000 -> 00:00:01,600] 你是不能让别人看见的
[00:00:01,600 -> 00:00:03,640] 然后别人就各种来challenge你
[00:00:03,640 -> 00:00:04,639] 或者怎样怎样是吧
[00:00:04,639 -> 00:00:05,960] 反正因为出于各种原因
[00:00:05,960 -> 00:00:07,280] 你是不能被别人看见的
[00:00:07,280 -> 00:00:08,560] 在Facebook所有的东西
[00:00:08,560 -> 00:00:09,480] 你发的东西
[00:00:09,480 -> 00:00:11,359] 你做的东西都是很透明的
[00:00:11,800 -> 00:00:13,160] 这些东西归根结底
[00:00:13,160 -> 00:00:15,439] 我觉得都可以被这个AB testing
[00:00:15,439 -> 00:00:17,120] 这么容易做来解释一部分
[00:00:17,120 -> 00:00:18,039] 或者影响一部分
[00:00:18,039 -> 00:00:19,760] 那我这就来稍稍
[00:00:19,760 -> 00:00:21,120] 第一我来解释一下
[00:00:21,120 -> 00:00:22,120] Facebook的AB testing
[00:00:22,120 -> 00:00:23,199] 为什么这么容易做
[00:00:23,399 -> 00:00:26,000] 第二跟其他公司稍稍做一个比较
[00:00:26,000 -> 00:00:26,839] 第三再解释一下
[00:00:26,839 -> 00:00:27,839] 我为什么觉得这样做
[00:00:27,839 -> 00:00:29,440] 可以影响公司的很多文化
[00:00:00,000 -> 00:00:03,580] 那就从第一个开始讲Facebook为什么AB testing这么容易做
[00:00:03,580 -> 00:00:05,700] 因为这件事情稍稍有点复杂
[00:00:05,700 -> 00:00:07,099] 我会省略很多技术细节
[00:00:07,099 -> 00:00:09,099] 我就大概讲一下分三点
[00:00:09,099 -> 00:00:12,179] 一个是它本身这个技术上
[00:00:12,179 -> 00:00:14,179] 就是engineering的技术上
[00:00:14,179 -> 00:00:15,939] enable了这件事情
[00:00:15,939 -> 00:00:19,420] 第二是它的数据的infrastructure enable了这件事情
[00:00:19,420 -> 00:00:22,859] 第三是它的business model enable了这件事情
[00:00:22,859 -> 00:00:24,179] 那我们就一个一个说啊
[00:00:24,179 -> 00:00:25,820] 从技术的角度来说呢
[00:00:25,820 -> 00:00:29,500] Facebook和其他公司最大区别是它有一个叫monorepo的东西
[00:00:00,000 -> 00:00:04,000] 就是repo就是你在GitHub上的那個repository
[00:00:04,000 -> 00:00:08,000] 在Facebook你的整個Facebook是一個repository
[00:00:08,000 -> 00:00:09,000] 它就monorepo嘛
[00:00:09,000 -> 00:00:13,000] 你就可以把它想像成是你可以一個壓縮包打包下來
[00:00:13,000 -> 00:00:14,000] 然後這就是整個Facebook
[00:00:14,000 -> 00:00:16,000] 你這個打包下來運行了以後
[00:00:16,000 -> 00:00:18,000] 你就可以直接再造一個Facebook
[00:00:18,000 -> 00:00:20,000] 在絕大多數的其他公司不是這樣的
[00:00:20,000 -> 00:00:23,000] 就是絕大多數的其他公司呢
[00:00:23,000 -> 00:00:25,000] 它是有很多很多個不同的repository
[00:00:25,000 -> 00:00:29,000] 可能是以人為單位,team為單位,organization為單位
[00:00:00,000 -> 00:00:01,919] 但是總之就是我們這一波人
[00:00:01,919 -> 00:00:03,000] 我們這一個項目
[00:00:03,000 -> 00:00:04,799] 我們去做了一個repository
[00:00:04,799 -> 00:00:07,360] 我們規範一個輸入和輸出
[00:00:07,360 -> 00:00:09,400] 然後其他team也做類似的事情
[00:00:09,400 -> 00:00:11,400] 做一個repository規範輸入輸出
[00:00:11,400 -> 00:00:12,960] 然後我們互相調用
[00:00:12,960 -> 00:00:14,480] 然後我們互相解決問題
[00:00:14,480 -> 00:00:15,960] 比如說我的這個business
[00:00:15,960 -> 00:00:17,600] 可以輸入一些東西
[00:00:17,600 -> 00:00:19,640] 然後輸出一些其他的東西給別人
[00:00:19,640 -> 00:00:20,879] 那別人就來調用我
[00:00:20,879 -> 00:00:21,079] 是吧
[00:00:21,079 -> 00:00:22,920] 他給我一個規定格式的輸入
[00:00:22,920 -> 00:00:24,480] 然後我再把他想要的
[00:00:24,480 -> 00:00:26,480] 他需要得到的結果輸出給別人
[00:00:26,480 -> 00:00:29,199] 兩種模式都各有好處各有壞處
[00:00:00,000 -> 00:00:01,360] 这就先不展开了
[00:00:01,360 -> 00:00:04,320] 但是Model Ripple最后就导致你在Test上
[00:00:04,320 -> 00:00:05,919] 你在做Testing特别简单
[00:00:05,919 -> 00:00:09,359] 因为你下载下来了现在的生产环境
[00:00:09,359 -> 00:00:12,800] 你不需要去setup整个任何的
[00:00:12,800 -> 00:00:15,199] 你不需要去setup很多东西
[00:00:15,199 -> 00:00:17,359] 你就可以直接在生产环境上
[00:00:17,359 -> 00:00:20,480] 去进行你的去setup你的新的
[00:00:20,480 -> 00:00:23,519] 你的Incremental的feature和Incremental的test
[00:00:23,519 -> 00:00:26,480] 所以就让这个AP testing
[00:00:26,480 -> 00:00:29,600] 从技术的技术根本上变得非常简单
[00:00:00,000 -> 00:00:03,680] 这是一,如果有机会的话我们可以展开再多聊一下
[00:00:03,680 -> 00:00:09,039] 而且我觉得我希望我可能请一个程序员朋友来聊一下
[00:00:09,039 -> 00:00:11,519] 就是我在这儿聊也不会聊得太深
[00:00:11,519 -> 00:00:14,560] 第二就是数据infrastructure的支持
[00:00:14,560 -> 00:00:18,559] 这里边既有login存储调用的支持
[00:00:18,559 -> 00:00:21,440] 然后也有to和data culture的支持
[00:00:21,440 -> 00:00:25,519] 就是你在Facebook大家login是做得特别好
[00:00:25,519 -> 00:00:28,800] 而且它的整个pipeline什么都做得很好
[00:00:00,000 -> 00:00:02,500] 然後你調用數據的這些服務器啊
[00:00:02,500 -> 00:00:04,400] 然後你的這些語言啊
[00:00:04,400 -> 00:00:05,599] 包括數據結構啊
[00:00:05,599 -> 00:00:06,500] 什麼都做得很好
[00:00:06,500 -> 00:00:09,099] 所以很多時候你在前台是感受不到這些事情的
[00:00:09,099 -> 00:00:11,199] 但是要做好這件事情其實是很難
[00:00:11,199 -> 00:00:13,000] 因為你對於Facebook這種體量
[00:00:13,000 -> 00:00:15,099] 尤其你比如說Session Level Data
[00:00:15,099 -> 00:00:19,500] 然後這些數據就是幾匹米很快就到幾匹米了
[00:00:19,500 -> 00:00:21,199] 然後你要把它存儲起來
[00:00:21,199 -> 00:00:22,600] 然後能快速調用的話
[00:00:22,600 -> 00:00:24,399] 是一件非常難的
[00:00:24,399 -> 00:00:27,000] By the way在Facebook有一個特別厲害的東西啊
[00:00:27,000 -> 00:00:27,800] 叫Scuba
[00:00:00,000 -> 00:00:02,759] 就是你一个TB级PB级的数据
[00:00:02,759 -> 00:00:04,639] 你可以实现秒级的调用
[00:00:04,639 -> 00:00:07,440] 如果你在不重要其他数据的情况下
[00:00:07,440 -> 00:00:10,359] 你真的是可以看real time的data
[00:00:10,359 -> 00:00:13,000] 就是比如说我要上这个
[00:00:13,000 -> 00:00:15,240] 我要在这个Facebook做一些行为
[00:00:15,240 -> 00:00:16,480] 然后我就会有一些login
[00:00:16,480 -> 00:00:17,640] 然后我去这个table
[00:00:17,640 -> 00:00:20,719] 我直接就可以看到我在几秒前做了什么事情
[00:00:20,719 -> 00:00:23,320] 这个东西就是在一个其他公司
[00:00:23,320 -> 00:00:25,359] 如果你没有这个infrastructure很难想象
[00:00:25,359 -> 00:00:29,280] 总之就是Facebook数据做得很好的一个体现
[00:00:00,000 -> 00:00:02,000] 那它在这些数据之上
[00:00:02,000 -> 00:00:07,000] 它又专门针对 A B Testing 去做了很多相应的工序
[00:00:07,000 -> 00:00:11,000] 比如说这个 Deltoid Quick Experiment GK 这些东西
[00:00:11,000 -> 00:00:12,000] Gatekeeper
[00:00:12,000 -> 00:00:17,000] 就是可以让你一方面很简单的理解 A B Testing 是什么
[00:00:17,000 -> 00:00:19,000] 并且进行的相应的 setup
[00:00:19,000 -> 00:00:22,000] 另外一方面呢 去检查你的这些 setup 对不对
[00:00:22,000 -> 00:00:26,000] 在后面就是当你这个 A B Testing 做出来之后
[00:00:26,000 -> 00:00:29,000] 它有一些把能自动化的东西都自动化了
[00:00:00,000 -> 00:00:04,280] 也就是說你到底要看你影響了什麼數據
[00:00:04,280 -> 00:00:06,679] 你要看什麼樣的GuardRail數據
[00:00:06,679 -> 00:00:11,240] 甚至他會自動幫你去說這些GuardRail數據你需要看
[00:00:11,240 -> 00:00:15,439] 然後他有一些很好的圖形界面告訴你說
[00:00:15,439 -> 00:00:16,760] 你現在應該到哪一步了
[00:00:16,760 -> 00:00:20,000] 你應該去看一下你比如說你的Exposure是不是Imbalance
[00:00:20,000 -> 00:00:24,559] 然後你看一下你要去Analyze一下你的結果
[00:00:24,559 -> 00:00:27,480] 很多時候就是一個Senior Engineer
[00:00:00,000 -> 00:00:03,720] 很多时候都可以自己从头到尾把这个experiment自己setup
[00:00:03,720 -> 00:00:04,719] 然后自己去解读
[00:00:04,719 -> 00:00:06,320] 然后自己去make a recommendation
[00:00:06,320 -> 00:00:08,839] 然后会有这个数据科学家和他们
[00:00:08,839 -> 00:00:11,320] 有的时候帮助他们一起去develop hypothesis
[00:00:11,320 -> 00:00:15,720] 有的时候去帮他们看一下他们的结果和这个是否验证了hypothesis
[00:00:15,720 -> 00:00:18,480] 是不是还有什么东西没有考虑到
[00:00:18,480 -> 00:00:21,239] 有的时候比如说结果和这个
[00:00:21,239 -> 00:00:23,960] 和你的预期和你预期不符
[00:00:23,960 -> 00:00:27,679] 那我们怎么样子去通过deep dive或者是看一些其他的东西
[00:00:27,679 -> 00:00:29,280] 去看一下到底是为什么
[00:00:00,000 -> 00:00:02,680] 这也是数据科学家们很重要的工作
[00:00:02,680 -> 00:00:05,919] 但是总之就是所有的这些东西
[00:00:05,919 -> 00:00:09,480] 都让每一个engineer有能力去setup
[00:00:09,480 -> 00:00:12,400] 和最后去setup A B testing
[00:00:12,400 -> 00:00:14,800] 然后最后得到结果去support
[00:00:14,800 -> 00:00:16,399] to launch一个新的东西
[00:00:16,399 -> 00:00:20,519] engineer也是这样去设计他们的工作的
[00:00:20,519 -> 00:00:24,320] 比如说一个engineer他去做一个新的feature的话
[00:00:00,000 -> 00:00:01,600] 那他就会去
[00:00:02,040 -> 00:00:03,640] 那就会从怎么样去
[00:00:03,640 -> 00:00:05,960] design这个AV testing开始
[00:00:06,799 -> 00:00:08,640] 所以说在Facebook
[00:00:08,640 -> 00:00:10,080] 很多新的东西
[00:00:10,080 -> 00:00:11,359] 就很像一个hackathon
[00:00:11,359 -> 00:00:12,480] 就是engineer
[00:00:12,480 -> 00:00:13,679] designer PM
[00:00:13,679 -> 00:00:15,000] DS什么的凑到一起
[00:00:15,000 -> 00:00:16,559] 说我们应该做一个这个东西
[00:00:16,559 -> 00:00:18,199] 然后第二天就做好了
[00:00:18,199 -> 00:00:19,120] 已经上实验了
[00:00:19,120 -> 00:00:20,719] 然后两个周三个周
[00:00:20,719 -> 00:00:22,239] 这个实验结果就出来了
[00:00:22,239 -> 00:00:23,760] 如果好的话就可以直接上线
[00:00:23,760 -> 00:00:25,879] 不需要你什么大佬跑过来
[00:00:25,879 -> 00:00:27,160] 告诉我要做什么
[00:00:27,160 -> 00:00:29,120] 很多时候就都真的是一个
[00:00:00,000 -> 00:00:02,560] Bottom-up的这种small incremental
[00:00:02,560 -> 00:00:05,960] 当然了这种模式有的时候也会带来一些问题
[00:00:05,960 -> 00:00:08,160] 但是我们现在是解释这件事情吧
[00:00:08,160 -> 00:00:09,359] 就先不暂时这件事情
[00:00:09,359 -> 00:00:12,000] 第三是它的business model
[00:00:12,000 -> 00:00:13,039] enable了这个
[00:00:13,039 -> 00:00:15,279] 就是比如说亚马逊他不想做A-B testing
[00:00:15,279 -> 00:00:18,120] 其实想做的亚马逊还有那么多经济学家
[00:00:18,120 -> 00:00:20,760] 就是因为你做不了A-B testing的情况下
[00:00:20,760 -> 00:00:23,440] 只能让经济学家来做有一些causal inference
[00:00:23,440 -> 00:00:24,960] 可是亚马逊的模型
[00:00:24,960 -> 00:00:26,280] 亚马逊的business model
[00:00:26,280 -> 00:00:28,320] 是你给商家和消费者提供服务
[00:00:28,320 -> 00:00:29,600] 是有真金白银的
[00:00:00,000 -> 00:00:02,560] Facebook是一個免費的產品
[00:00:02,560 -> 00:00:04,879] Facebook Instagram WhatsApp Messenger
[00:00:04,879 -> 00:00:06,240] 都是免費給大家用的
[00:00:06,240 -> 00:00:08,640] 然後它是靠廣告來賺錢的
[00:00:08,640 -> 00:00:11,519] 這種情況下它就允許
[00:00:11,519 -> 00:00:13,919] 法律允許 道德允許或怎樣
[00:00:13,919 -> 00:00:16,160] 就是允許它做各種各樣的test
[00:00:16,160 -> 00:00:18,719] 給用戶不同的這個experience
[00:00:18,719 -> 00:00:20,800] 因為這根結底這是一個免費產品
[00:00:20,800 -> 00:00:25,839] 所以說就是在法律或者說是在這個法律
[00:00:25,839 -> 00:00:27,280] 或者說是在商業模式上
[00:00:27,280 -> 00:00:29,280] 也掃清了很多aptizing的障礙
[00:00:00,000 -> 00:00:04,040] 因为其实setup A B testing有的时候是会有一个伦理的问题的
[00:00:04,040 -> 00:00:07,839] 就是你可能你知道experience A 好
[00:00:07,839 -> 00:00:09,359] experience B 不好的话
[00:00:09,359 -> 00:00:11,279] 你必须要给所有的人experience A
[00:00:11,279 -> 00:00:13,039] 尤其是你在收费的情况下
[00:00:13,039 -> 00:00:20,000] 所以就是说这个A B testing不是适合每一个企业来做
[00:00:20,000 -> 00:00:22,399] 但是在不能做A B testing的情况下
[00:00:22,399 -> 00:00:26,120] 确实经济学家做这个reduce from causal inference
[00:00:00,000 -> 00:00:04,639] 很多时候也能帮助你从数据中得到因果关系
[00:00:04,639 -> 00:00:06,879] 那是另外一个topic来讲的
[00:00:06,879 -> 00:00:07,799] 今天就先不讲
[00:00:07,799 -> 00:00:10,800] 总之123就是技术上数据上
[00:00:10,800 -> 00:00:14,080] 数据包括数据文化和商业模式上
[00:00:14,080 -> 00:00:18,679] 都让Facebook的工程师们可以很快很方便
[00:00:18,679 -> 00:00:22,199] 并且很鼓励他去setup A B testing
[00:00:22,199 -> 00:00:26,160] 这也就是看到了在Facebook上A B testing特别多
[00:00:26,160 -> 00:00:27,399] 你几乎没有一个人
[00:00:00,000 -> 00:00:02,759] 你在用这个APP的时候得到的体验是一样的
[00:00:02,759 -> 00:00:05,799] 就几千几万个这个A B testing都在同时进行
[00:00:05,799 -> 00:00:08,279] 这可能有的时候也不好吧
[00:00:08,279 -> 00:00:11,960] 但是总之到现在几千几万个A B testing同时进行的情况下
[00:00:11,960 -> 00:00:14,720] 你的这个产品大体上还是可用的
[00:00:14,720 -> 00:00:17,160] 它本身也还是挺牛逼的一件事情
[00:00:17,160 -> 00:00:18,960] 那好
[00:00:18,960 -> 00:00:20,920] 那刚刚说了A B testing可以做
[00:00:20,920 -> 00:00:23,800] 那我就把Facebook和其他公司的
[00:00:23,800 -> 00:00:26,920] 因为能做A B testing导致文化上的差异
[00:00:26,920 -> 00:00:28,199] 给稍稍对比一下
[00:00:00,000 -> 00:00:02,940] 就比如说你在亚马逊这样的公司
[00:00:02,940 -> 00:00:04,940] 你要立项是吧
[00:00:04,940 -> 00:00:07,679] 因为你做一个东西会很慢
[00:00:07,679 -> 00:00:09,679] 刚刚说了
[00:00:09,679 -> 00:00:11,679] Facebook有model repo
[00:00:11,679 -> 00:00:13,679] 加上工程师
[00:00:13,679 -> 00:00:15,679] 这里边工程师可能平均水平有差异
[00:00:15,679 -> 00:00:17,679] 但是我觉得差异并没有那么大
[00:00:17,679 -> 00:00:19,679] 当然你在Facebook你就是
[00:00:19,679 -> 00:00:21,679] 我要改一个东西我下下来我直接改了
[00:00:21,679 -> 00:00:23,679] 没有人阻止你干这件事情
[00:00:23,679 -> 00:00:25,679] 只要你去做experiment
[00:00:25,679 -> 00:00:27,679] 你能follow a standard protocol
[00:00:27,679 -> 00:00:29,679] or procedure
[00:00:00,000 -> 00:00:04,280] 但是在亞馬遜呢,你想嘛,你的這個東西是大家互相調用的
[00:00:04,280 -> 00:00:05,559] dependency特別強
[00:00:05,559 -> 00:00:08,960] 牽一髮動全身,很多時候有一些東西你是考慮不到的
[00:00:08,960 -> 00:00:10,960] 所以說你要做什麼東西呢
[00:00:10,960 -> 00:00:17,079] 你就要先跟調用你的,或者說你被調用的人
[00:00:17,079 -> 00:00:22,440] 進行一些溝通,我不會我這改了一個什麼東西去breaking你的pipeline
[00:00:22,440 -> 00:00:25,879] 在那之後呢,你要去跟大佬要資源
[00:00:25,879 -> 00:00:29,039] 因為你要去做這些東西呢,它時間很長
[00:00:00,000 -> 00:00:03,439] 你要完了资源以后呢,你开始去做
[00:00:03,439 -> 00:00:07,000] 那这个时候你在很多情况下又不能去做A-B Testing
[00:00:07,000 -> 00:00:09,599] 所以说你做这个东西到底为什么值得做
[00:00:09,599 -> 00:00:12,599] 你是要靠说和大家进行一个judgment
[00:00:12,599 -> 00:00:15,080] 而不是靠数据结果去说话
[00:00:15,080 -> 00:00:19,320] 不能靠一个非常credible的causal experiment来说话
[00:00:19,320 -> 00:00:21,239] 那最后就是说
[00:00:21,239 -> 00:00:25,839] 那最后就把你的很多时间都用在立项这个点了
[00:00:25,839 -> 00:00:28,079] 而不是去真正做这件事情的这个点
[00:00:00,000 -> 00:00:03,160] 我會看到一些很多顯而易見的問題的話
[00:00:03,160 -> 00:00:04,280] 它很快就被糾正了
[00:00:04,280 -> 00:00:05,519] 但是在亞馬遜
[00:00:05,519 -> 00:00:08,560] 很多很顯而易見的問題沒有馬上被糾正
[00:00:08,560 -> 00:00:11,480] 就是這個文化最後導致的問題
[00:00:11,480 -> 00:00:13,400] 甚至這些文化導致的問題
[00:00:13,400 -> 00:00:15,599] 不光體現在你的產品本身
[00:00:15,599 -> 00:00:17,320] 你甚至體現在公司文化上
[00:00:17,320 -> 00:00:19,440] 就是在亞馬遜我記得很清楚
[00:00:19,440 -> 00:00:21,039] 就是大家說frugal
[00:00:21,039 -> 00:00:23,199] 就是你的那個USB的Ubkey
[00:00:23,199 -> 00:00:25,440] 很多電腦現在都是type C了
[00:00:25,440 -> 00:00:27,039] 然後你的Ubkey還是type A
[00:00:27,039 -> 00:00:29,320] 這樣就導致你拿那個Ubkey的時候
[00:00:00,000 -> 00:00:02,000] 你還要專門去買一個轉接口
[00:00:02,000 -> 00:00:03,500] 這個事我覺得就很不make sense
[00:00:03,500 -> 00:00:05,839] 但是你提了沒有用找誰呢
[00:00:05,839 -> 00:00:07,040] 然後大家也沒有改
[00:00:07,040 -> 00:00:08,539] 就是這種顯而易見的
[00:00:08,539 -> 00:00:10,880] 我覺得會造成不效率的事情沒有改
[00:00:10,880 -> 00:00:14,140] 我覺得這個就是有一些公司文化上的差異
[00:00:14,140 -> 00:00:15,339] 就是你在Facebook這件事情
[00:00:15,339 -> 00:00:16,539] 可能就會有一個人說
[00:00:16,539 -> 00:00:17,920] 那我就去把它改掉了
[00:00:17,920 -> 00:00:19,219] 然後大家就去改了
[00:00:19,219 -> 00:00:22,760] 在亞馬遜可能就你要往上走幾輪
[00:00:22,760 -> 00:00:23,600] 再往下走幾輪
[00:00:23,600 -> 00:00:26,760] 然後這件事情對於任何要做這件事情的人來說
[00:00:26,760 -> 00:00:28,480] 性價比都不是非常高
[00:00:28,480 -> 00:00:29,480] 那可能就不做了
[00:00:00,000 -> 00:00:03,660] 那這個話題可能其實又有點多啊
[00:00:03,660 -> 00:00:06,660] 那我們就要再找個機會再詳細展開吧
[00:00:06,660 -> 00:00:09,160] 我們今天還是圍繞在AppTesting上
[00:00:09,160 -> 00:00:11,660] 那AppTesting的最後一個點
[00:00:11,660 -> 00:00:15,080] 就是它對工程師的這個promotion的影響
[00:00:15,080 -> 00:00:18,539] 或者說為什麼大家覺得Facebook的工程師這麼拼
[00:00:18,539 -> 00:00:20,539] 就大家是有這樣一個普遍的觀感的
[00:00:20,539 -> 00:00:22,739] 就是有一個四項線
[00:00:22,739 -> 00:00:24,079] 四個大廠的四項線
[00:00:24,079 -> 00:00:27,079] 就是微軟、谷歌、電訊、Facebook
[00:00:27,079 -> 00:00:29,199] 然後Facebook是錢多事多
[00:00:00,000 -> 00:00:02,000] 谷歌是錢多事少
[00:00:02,000 -> 00:00:05,000] 微軟是錢少事少
[00:00:05,000 -> 00:00:07,000] 然後亞馬遜是錢少事多
[00:00:07,000 -> 00:00:08,000] 這開玩笑啊
[00:00:08,000 -> 00:00:11,000] 但是很多知道這些大廠的人可能也會後心一笑
[00:00:11,000 -> 00:00:13,000] 就是代表了一種情況
[00:00:13,000 -> 00:00:15,000] 那Facebook為什麼
[00:00:15,000 -> 00:00:18,000] 它錢多事多呢
[00:00:18,000 -> 00:00:21,000] 就是或者說為什麼Facebook升值快
[00:00:21,000 -> 00:00:24,000] 我其實不知道平均升值哪更快一點
[00:00:24,000 -> 00:00:27,000] 但是大家普遍觀感是Facebook升值快
[00:00:27,000 -> 00:00:29,000] 因為在Facebook確實有一些case
[00:00:00,000 -> 00:00:02,720] 它會讓那些年輕人生活特別特別快
[00:00:02,720 -> 00:00:05,320] 比如說我之前合作的engineer manager
[00:00:05,320 -> 00:00:07,480] 他是本科和研究生
[00:00:07,480 -> 00:00:08,960] 塞起來四年讀完了
[00:00:08,960 -> 00:00:11,640] 然後是一個23、24歲的小夥子
[00:00:11,640 -> 00:00:14,080] 進了Facebook三年連升三級
[00:00:14,080 -> 00:00:15,400] 就三年連升三級
[00:00:15,400 -> 00:00:16,120] 這在Facebook
[00:00:16,120 -> 00:00:17,519] 這在亞馬遜的話
[00:00:17,519 -> 00:00:19,039] 你五年升三級的話
[00:00:19,039 -> 00:00:20,320] 一般都還是比較快的
[00:00:20,320 -> 00:00:22,440] 三年連升三級
[00:00:22,440 -> 00:00:23,839] 然後這也不是
[00:00:23,839 -> 00:00:25,839] 我身邊有好多學長或者朋友
[00:00:25,839 -> 00:00:28,600] 他們在很年輕30歲左右的時候
[00:00:28,600 -> 00:00:29,640] 30多歲的時候
[00:00:00,000 -> 00:00:02,000] 就已經是L7 L8
[00:00:02,000 -> 00:00:06,000] 就是他們是L6 L7
[00:00:06,000 -> 00:00:08,000] 那在對應在亞馬遜的話
[00:00:08,000 -> 00:00:10,000] 就是L7 L8
[00:00:10,000 -> 00:00:12,000] 這種東西這種情況
[00:00:12,000 -> 00:00:14,000] 在其他的廠
[00:00:14,000 -> 00:00:16,000] 確實是比較少見的
[00:00:16,000 -> 00:00:18,000] 就是為什麼會有這種Outlier
[00:00:18,000 -> 00:00:20,000] 為什麼會有升得這麼快的緣故呢
[00:00:20,000 -> 00:00:22,000] 就是我說的你在Facebook
[00:00:22,000 -> 00:00:24,000] 你的Impact是非常透明的
[00:00:24,000 -> 00:00:27,000] 所以說它不是靠你積累時間
[00:00:27,000 -> 00:00:29,000] 很多時候大家就是靠成果說話
[00:00:00,000 -> 00:00:02,000] 我说的这个Miracles
[00:00:02,000 -> 00:00:05,000] 你能找到一个high impact的项目
[00:00:05,000 -> 00:00:07,000] 然后你能去把它做出来
[00:00:07,000 -> 00:00:10,000] 然后你可以用AB testing的这种大framework
[00:00:10,000 -> 00:00:13,000] 再加上一些其他东西去justify你的结果
[00:00:13,000 -> 00:00:17,000] 然后这个东西确实是大家都认可了一个很重要的东西
[00:00:17,000 -> 00:00:19,000] 那你就可以升职
[00:00:19,000 -> 00:00:20,000] Versus你在其他公司
[00:00:20,000 -> 00:00:23,000] 如果你没有这整个一套的流程体系的话
[00:00:23,000 -> 00:00:25,000] 你可能你做一些东西
[00:00:25,000 -> 00:00:27,000] 你首先要老板同意
[00:00:00,000 -> 00:00:02,759] 然后最后把它做出来了以后
[00:00:02,759 -> 00:00:04,559] credit未必是你投上的
[00:00:04,559 -> 00:00:07,919] 因为说实话真的就是推动这个项目立项
[00:00:07,919 -> 00:00:09,400] 然后推动它能往前走
[00:00:09,400 -> 00:00:11,439] 本身是一些很难的情况下的话
[00:00:11,439 -> 00:00:14,560] 很多时候你credit应该是share给这些人
[00:00:14,560 -> 00:00:16,160] 不光是做这个东西的人
[00:00:16,160 -> 00:00:19,559] 而且Facebook这种你所有的东西可以被量化
[00:00:19,559 -> 00:00:23,600] 然后是一个mirror topocracy的框架之下
[00:00:23,600 -> 00:00:25,559] 让你的反馈变得特别快
[00:00:25,559 -> 00:00:26,679] 就是你做一个东西
[00:00:00,000 -> 00:00:03,799] 你瞬間就知道你做這個東西的結果是什麼
[00:00:03,799 -> 00:00:05,559] 其實就像我們小時候做題一樣
[00:00:05,559 -> 00:00:06,960] 我們小時候做題的時候
[00:00:06,960 -> 00:00:08,759] 就你做錯了,做對做錯了
[00:00:08,759 -> 00:00:10,439] 你學習了,馬上有一個反饋
[00:00:10,439 -> 00:00:12,039] 那你有直接反饋的情況下
[00:00:12,039 -> 00:00:14,199] 你就非常有動力繼續去往前做,對吧
[00:00:14,199 -> 00:00:16,960] 去做更多的題,拿更高的分數
[00:00:16,960 -> 00:00:20,760] 因為你相信一分耕耘一分收穫
[00:00:20,760 -> 00:00:23,079] 那在這種情況下
[00:00:23,079 -> 00:00:25,519] 就會給這個工作的同事們
[00:00:25,519 -> 00:00:28,320] 一個很強的內心的自取力
[00:00:00,000 -> 00:00:03,839] 這就是我在Facebook看到的現狀
[00:00:03,839 -> 00:00:06,639] 我覺得這個現狀當然有好有不好
[00:00:06,639 -> 00:00:09,480] 可是我還是覺得這確實是
[00:00:09,480 -> 00:00:12,919] 企業管理也好啊或者說是
[00:00:12,919 -> 00:00:17,280] 可是我覺得確實這是代表了
[00:00:17,280 -> 00:00:19,039] 企業未來的一個前進方向
[00:00:19,039 -> 00:00:21,559] 就是它帶來了那些不好的地方
[00:00:21,559 -> 00:00:23,640] 我們應該有辦法去克服
[00:00:23,640 -> 00:00:27,320] 但是它的這個好處實在是太overwhelming了
[00:00:00,000 -> 00:00:03,520] 包括你的每一个人的产出是可以被客观量化的
[00:00:03,520 -> 00:00:05,000] 你的做出来一个东西
[00:00:05,000 -> 00:00:07,320] 我们是有一个非常非常科学的方法
[00:00:07,320 -> 00:00:10,039] 去来讲述这个东西到底是好还是不好
[00:00:10,039 -> 00:00:12,720] 对我们用户是更有价值了还是更没有价值了
[00:00:12,720 -> 00:00:17,280] 这个事本身完全outweigh所有的带来的不好的影响
[00:00:17,280 -> 00:00:21,359] 那我觉得就是先跟大家share一下这些东西
[00:00:21,359 -> 00:00:23,760] 如果大家有讨论的话欢迎跟我讨论
[00:00:23,760 -> 00:00:28,120] 和如果你因为我毕竟我带的公司还算是比较少的
[00:00:00,000 -> 00:00:03,960] 如果你在其他公司看到了关于AB Testing的不同实践
[00:00:03,960 -> 00:00:06,200] 或者说你觉得AB Testing在你那儿不好
[00:00:06,200 -> 00:00:08,000] 也欢迎跟我一起讨论一下
[00:00:08,000 -> 00:00:09,400] 那我们下期再见
[00:00:09,400 -> 00:00:10,000] 拜拜
