name: Transcribe MP3 on Push

on:
  push:
    branches:
      - 'process-*'
  workflow_dispatch:
    inputs:
      batch_number:
        description: 'Batch number to process (starting from 1)'
        required: false
        default: '1'

permissions:
  contents: write

jobs:
  transcribe-on-push:
    if: github.event_name == 'push'
    runs-on: runner
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          ref: ${{ github.ref }}

      - name: Process MP3 with Whisper JAX
        run: |
          source /home/junfan/test/venv/bin/activate
          export HIP_VISIBLE_DEVICES=0,1,2,3,4,5,6,7
          python3 << EOF
          from transformers import pipeline
          asr_pipeline = pipeline("automatic-speech-recognition", model="openai/whisper-large-v2", device=0)
          result = asr_pipeline("output.mp3", return_timestamps=True)

          def format_timestamp(seconds):
              hours = int(seconds // 3600)
              minutes = int((seconds % 3600) // 60)
              seconds = seconds % 60
              milliseconds = int((seconds - int(seconds)) * 1000)
              return f"{hours:02}:{minutes:02}:{int(seconds):02},{milliseconds:03}"

          with open('transcript.srt', 'w', encoding='utf-8') as f:
              for i, segment in enumerate(result['chunks'], start=1):
                  start = segment['timestamp'][0]
                  end = segment['timestamp'][1]
                  text = segment['text'].strip()
                  f.write(f"{i}\n{format_timestamp(start)} --> {format_timestamp(end)}\n{text}\n\n")

          with open('transcript.txt', 'w', encoding='utf-8') as f:
              for segment in result['chunks']:
                  start = segment['timestamp'][0]
                  end = segment['timestamp'][1]
                  text = segment['text'].strip()
                  f.write(f"[{format_timestamp(start)} -> {format_timestamp(end)}] {text}\n")

          print("Transcription completed and saved.")
          EOF

      - name: Commit Transcript
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git remote set-url origin https://${{ github.actor }}:${{ env.GH_TOKEN }}@github.com/${{ github.repository }}
          git add transcript.srt transcript.txt
          git commit -m 'Add transcription files'
          git push origin ${{ github.ref }}

  find-branches:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      total_batches: ${{ steps.calculate-batches.outputs.total_batches }}
      batch_branches: ${{ steps.calculate-batches.outputs.batch_branches }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: List branches
        id: list-branches
        run: |
          git fetch --all
          BRANCHES=$(git ls-remote --heads origin "process-*" | awk '{print $2}' | sed 's|refs/heads/||')
          echo "Found branches:"
          echo "$BRANCHES"
          # Clear or create the file to avoid appending to old data
          > branches_to_process.txt
          for BRANCH in $BRANCHES; do
            echo "Checking branch $BRANCH"
            if ! git ls-tree -r --name-only origin/$BRANCH | grep -qE 'transcript\.txt|transcript\.srt'; then
              echo "Branch $BRANCH does not have transcript files."
              echo "$BRANCH" >> branches_to_process.txt
            else
              echo "Branch $BRANCH already has transcript files."
            fi
          done
          echo "Branches to process:"
          cat branches_to_process.txt
      
      - name: Calculate Batches
        id: calculate-batches
        run: |
          BATCH_SIZE=256
          BATCH_NUMBER=${{ github.event.inputs.batch_number }}
          if [ -z "$BATCH_NUMBER" ]; then
            BATCH_NUMBER=1
          fi
      
          TOTAL_BRANCHES=$(wc -l < branches_to_process.txt)
          TOTAL_BATCHES=$(( (TOTAL_BRANCHES + BATCH_SIZE - 1) / BATCH_SIZE ))
      
          # Check if BATCH_NUMBER is within a valid range
          if [ "$BATCH_NUMBER" -gt "$TOTAL_BATCHES" ]; then
            echo "Error: BATCH_NUMBER $BATCH_NUMBER exceeds TOTAL_BATCHES $TOTAL_BATCHES."
            exit 1
          fi
      
          echo "Processing batch number: $BATCH_NUMBER"
          echo "Total branches: $TOTAL_BRANCHES"
          echo "Total batches: $TOTAL_BATCHES"
      
          START_INDEX=$(( (BATCH_NUMBER - 1) * BATCH_SIZE + 1 ))
          END_INDEX=$(( BATCH_NUMBER * BATCH_SIZE ))
      
          # Adjust END_INDEX if it exceeds TOTAL_BRANCHES
          if [ $END_INDEX -gt $TOTAL_BRANCHES ]; then
            END_INDEX=$TOTAL_BRANCHES
          fi
      
          echo "Processing branches from $START_INDEX to $END_INDEX"
      
          # Extract the branches for this batch and convert to JSON array format
          BATCH_BRANCHES=$(sed -n "${START_INDEX},${END_INDEX}p" branches_to_process.txt | jq -R . | jq -s .)
          echo "$BATCH_BRANCHES" > batch_branches.json

          
      # Upload batch_branches.json as an artifact
      - name: Upload batch_branches.json artifact
        uses: actions/upload-artifact@v3
        with:
          name: batch_branches
          path: batch_branches.json

  transcribe-on-dispatch:
    if: github.event_name == 'workflow_dispatch'
    needs: [find-branches]
    runs-on: runner
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download batch_branches.json artifact
        uses: actions/download-artifact@v3
        with:
          name: batch_branches
  
      - name: Read and process each branch in batch_branches.json
        env:
            GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
            cp .github/convert2txt.py .
            # Load the JSON file and parse each branch
            for branch in $(jq -r '.[]' batch_branches.json); do
              echo "Processing branch $branch"

              # Checkout the branch
              git checkout $branch

              # Run transcription commands here
              source /home/junfan/test/venv/bin/activate
              export HIP_VISIBLE_DEVICES=0,1,2,3,4,5,6,7
              python3 convert2txt.py

              # Commit the transcription files
              git config --global user.name 'github-actions'
              git config --global user.email 'github-actions@github.com'
              git remote set-url origin https://${{ github.actor }}:${{ env.GH_TOKEN }}@github.com/${{ github.repository }}
              git add transcript.srt transcript.txt
              git commit -m "Add transcription files for $branch"
              git push origin $branch
            done
