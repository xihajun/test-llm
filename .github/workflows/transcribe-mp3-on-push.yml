name: Transcribe MP3 on Push

on:
#   push:
#     branches:
#       - 'process-*'
  workflow_dispatch:
    inputs:
      batch_number:
        description: 'Batch number to process (starting from 1)'
        required: false
        default: '1'

permissions:
  contents: write

jobs:
  transcribe-on-push:
    if: github.event_name == 'push'
    runs-on: runner
    timeout-minutes: 180
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          ref: ${{ github.ref }}

      - name: Process MP3 with Whisper JAX
        id: transcribe
        run: |
          source /home/junfan/test/venv/bin/activate
          export HIP_VISIBLE_DEVICES=0,1,2,3,4,5,6,7
          python3 .github/workflows/convert2txt.py

      - name: Commit Transcript
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git remote set-url origin https://${{ github.actor }}:${{ env.GH_TOKEN }}@github.com/${{ github.repository }}
          
          if [[ -f transcript.srt && -f transcript.txt ]]; then
            git add transcript.srt transcript.txt
            if ! git diff --staged --quiet; then
              git commit -m 'Add transcription files'
              git push origin ${{ github.ref }}
            else
              echo "No changes to commit"
            fi
          else
            echo "Error: Transcription files not found"
            exit 1
          fi

  find-branches:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      total_batches: ${{ steps.calculate-batches.outputs.total_batches }}
      batch_branches: ${{ steps.calculate-batches.outputs.batch_branches }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: List and categorize branches
        id: list-branches
        run: |
          mkdir -p branch_info
          
          # Get all process-* branches
          BRANCHES=$(git ls-remote --heads origin "process-*" | awk '{print $2}' | sed 's|refs/heads/||')
          echo "$BRANCHES" > branch_info/all_branches.txt
          
          # Initialize branch category files
          > branch_info/branches_to_process.txt
          > branch_info/branches_with_transcripts.txt
          > branch_info/branches_without_mp3.txt
          
          for BRANCH in $BRANCHES; do
            git fetch origin $BRANCH:refs/remotes/origin/$BRANCH --force
            
            if ! git ls-tree -r --name-only origin/$BRANCH HEAD | grep -qE 'transcript\.txt|transcript\.srt'; then
              if git ls-tree -r --name-only origin/$BRANCH | grep -q 'output.mp3'; then
                echo "$BRANCH" >> branch_info/branches_to_process.txt
              else
                echo "$BRANCH" >> branch_info/branches_without_mp3.txt
              fi
            else
              echo "$BRANCH" >> branch_info/branches_with_transcripts.txt
            fi
          done

      - name: Calculate Batches
        id: calculate-batches
        run: |
          BATCH_SIZE=256
          BATCH_NUMBER="${{ github.event.inputs.batch_number }}"
          BATCH_NUMBER=${BATCH_NUMBER:-1}
          
          if [ ! -f "branch_info/branches_to_process.txt" ] || [ ! -s "branch_info/branches_to_process.txt" ]; then
            echo "No branches to process"
            echo "total_batches=0" >> $GITHUB_OUTPUT
            echo "batch_branches=[]" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          TOTAL_BRANCHES=$(wc -l < "branch_info/branches_to_process.txt")
          TOTAL_BATCHES=$(( (TOTAL_BRANCHES + BATCH_SIZE - 1) / BATCH_SIZE ))
          
          if [ "$BATCH_NUMBER" -gt "$TOTAL_BATCHES" ]; then
            echo "Error: Batch number $BATCH_NUMBER exceeds total batches $TOTAL_BATCHES"
            exit 1
          fi
          
          START_INDEX=$(( (BATCH_NUMBER - 1) * BATCH_SIZE + 1 ))
          END_INDEX=$(( BATCH_NUMBER * BATCH_SIZE ))
          if [ $END_INDEX -gt $TOTAL_BRANCHES ]; then
            END_INDEX=$TOTAL_BRANCHES
          fi
          
          # Create JSON array properly
          echo "Creating batch array from index $START_INDEX to $END_INDEX"
          BATCH_BRANCHES=$(sed -n "${START_INDEX},${END_INDEX}p" "branch_info/branches_to_process.txt" | \
                          sed 's/^/"/; s/$/"/' | \
                          paste -sd, - | \
                          sed 's/^/[/; s/$/]/')
          
          # Write outputs
          echo "total_batches=$TOTAL_BATCHES" >> $GITHUB_OUTPUT
          echo "batch_branches=$BATCH_BRANCHES" >> $GITHUB_OUTPUT
          echo "$BATCH_BRANCHES" > "branch_info/batch_branches.json"
          
          # Debug output
          echo "Total branches: $TOTAL_BRANCHES"
          echo "Total batches: $TOTAL_BATCHES"
          echo "Current batch: $BATCH_NUMBER"
          echo "Batch branches: $BATCH_BRANCHES"

      - name: Upload branch information
        uses: actions/upload-artifact@v3
        with:
          name: branch-info
          path: branch_info/
          retention-days: 90

  transcribe-on-dispatch:
    if: github.event_name == 'workflow_dispatch'
    needs: [find-branches]
    runs-on: runner
    timeout-minutes: 1440  # 24 hours
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download branch information
        uses: actions/download-artifact@v3
        with:
          name: branch-info
          path: branch_info

      # 添加设置 convert2txt.py 的步骤
      - name: Setup convert2txt script
        run: |
          # 创建目录（如果不存在）
          mkdir -p .github/workflows
          
          # 创建 convert2txt.py 脚本
          cat > convert2txt.py << 'EOL'
          import os
          from transformers import pipeline
          import logging
          import sys

          logging.basicConfig(
              level=logging.INFO,
              format='%(asctime)s - %(levelname)s - %(message)s',
              handlers=[logging.StreamHandler(sys.stdout)]
          )

          def format_timestamp(seconds):
              hours = int(seconds // 3600)
              minutes = int((seconds % 3600) // 60)
              seconds = seconds % 60
              milliseconds = int((seconds - int(seconds)) * 1000)
              return f"{hours:02}:{minutes:02}:{int(seconds):02},{milliseconds:03}"

          def process_audio(input_file='output.mp3'):
              try:
                  # Check if files already exist
                  if os.path.exists('transcript.srt') and os.path.exists('transcript.txt'):
                      logging.info("Transcript files already exist, skipping processing")
                      return True

                  # Check if input file exists
                  if not os.path.exists(input_file):
                      logging.error(f"Error: {input_file} not found")
                      return False

                  logging.info("Loading ASR pipeline...")
                  asr_pipeline = pipeline("automatic-speech-recognition", 
                                      model="openai/whisper-large-v2", 
                                      device=1,
                                      chunk_length_s=30,
                                      batch_size=128)
                  
                  logging.info("Processing audio file...")
                  result = asr_pipeline(input_file, return_timestamps=True)
                  
                  logging.info("Writing SRT file...")
                  with open('transcript.srt', 'w', encoding='utf-8') as f:
                      for i, segment in enumerate(result['chunks'], start=1):
                          start = segment['timestamp'][0]
                          end = segment['timestamp'][1]
                          text = segment['text'].strip()
                          f.write(f"{i}\n{format_timestamp(start)} --> {format_timestamp(end)}\n{text}\n\n")

                  logging.info("Writing TXT file...")
                  with open('transcript.txt', 'w', encoding='utf-8') as f:
                      for segment in result['chunks']:
                          start = segment['timestamp'][0]
                          end = segment['timestamp'][1]
                          text = segment['text'].strip()
                          f.write(f"[{format_timestamp(start)} -> {format_timestamp(end)}] {text}\n")

                  if os.path.exists('transcript.srt') and os.path.exists('transcript.txt'):
                      logging.info("Transcription completed successfully")
                      return True
                  else:
                      logging.error("Error: Transcription files not created")
                      return False

              except Exception as e:
                  logging.error(f"Error during transcription: {str(e)}")
                  return False

          if __name__ == "__main__":
              try:
                  success = process_audio()
                  sys.exit(0 if success else 1)
              except Exception as e:
                  logging.error(f"Fatal error: {str(e)}")
                  sys.exit(1)
          EOL

          chmod +x convert2txt.py

      - name: Process branches
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          source /home/junfan/test/venv/bin/activate
          export HIP_VISIBLE_DEVICES=0,1,2,3,4,5,6,7
          
          if [ ! -f branch_info/branches_to_process.txt ] || [ ! -s branch_info/branches_to_process.txt ]; then
            echo "No branches need processing"
            exit 0
          fi
          
          # Configure git
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git remote set-url origin https://${{ github.actor }}:${{ env.GH_TOKEN }}@github.com/${{ github.repository }}
          
          # Process each branch
          while IFS= read -r branch; do
            echo "Processing branch: $branch"
            
            if ! git checkout "$branch"; then
              echo "Failed to checkout branch: $branch"
              continue
            fi
            
            git pull origin "$branch"
            
            # 先检查是否已有转录文件
            if [[ -f transcript.srt && -f transcript.txt ]]; then
              echo "Transcription files already exist for branch: $branch"
              continue
            fi
            
            # 检查是否有音频文件
            if [ ! -f output.mp3 ]; then
              echo "No output.mp3 found in branch: $branch"
              continue
            fi
            
            # 运行转录脚本
            if python3 convert2txt.py; then
              if [[ -f transcript.srt && -f transcript.txt ]]; then
                git add transcript.srt transcript.txt
                if ! git diff --staged --quiet; then
                  git commit -m "Add transcription files for $branch"
                  if git push origin "$branch"; then
                    echo "Successfully processed branch: $branch"
                  else
                    echo "Failed to push changes for branch: $branch"
                  fi
                else
                  echo "No changes to commit for branch: $branch"
                fi
              else
                echo "Transcription failed to create files for branch: $branch"
              fi
            else
              echo "Processing failed for branch: $branch"
            fi
          done < branch_info/branches_to_process.txt
