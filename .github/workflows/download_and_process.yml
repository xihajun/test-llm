name: Download and Process MP3

on:
  workflow_dispatch:
    inputs:
      url:
        description: "YouTube视频URL"
        required: true
        type: string
        
permissions:
  contents: write
  
jobs:
  download-and-process:
    runs-on: downloader
    outputs:
      branch_id: ${{ steps.set_branch_id.outputs.branch_id }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set Branch ID
      id: set_branch_id
      run: |
        VIDEO_ID=$(echo "${{ github.event.inputs.url }}" | grep -oP "(?<=v=)[^&]*|(?<=be/)[^&]*")
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        BRANCH_ID="${VIDEO_ID}_${TIMESTAMP}"
        echo "branch_id=${BRANCH_ID}" >> $GITHUB_OUTPUT
        
    - name: Download MP3 from YouTube
      run: yt-dlp -x --audio-format mp3 -o "output.mp3" "${{ github.event.inputs.url }}"
      
    - name: Commit MP3 to repository
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        git checkout -b "process-${{ steps.set_branch_id.outputs.branch_id }}"
        git add output.mp3
        git commit -m 'Add downloaded MP3 file'
        git push origin "process-${{ steps.set_branch_id.outputs.branch_id }}"

  process-mp3:
    runs-on: runner
    needs: download-and-process
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: "process-${{ needs.download-and-process.outputs.branch_id }}"
        
    - name: Process MP3 with Whisper JAX
      run: |

        source /home/junfan/test/venv/bin/activate
        export HIP_VISIBLE_DEVICES=0,1,2,3,4,5,6,7
        python3 << EOF
        from transformers import pipeline

        # Initialize the pipeline with bfloat16 precision and batching
        asr_pipeline = pipeline("automatic-speech-recognition", model="openai/whisper-base", device=0)
    
        # Transcribe the audio file with timestamps
        result = asr_pipeline("output.mp3", return_timestamps=True)

        def format_timestamp(seconds):
            hours = int(seconds // 3600)
            minutes = int((seconds % 3600) // 60)
            seconds = seconds % 60
            milliseconds = int((seconds - int(seconds)) * 1000)
            return f"{hours:02}:{minutes:02}:{int(seconds):02},{milliseconds:03}"

        # Save the transcription with timestamps
        with open('transcript.srt', 'w', encoding='utf-8') as f:
            for i, segment in enumerate(result['chunks'], start=1):
                start = segment['timestamp'][0]
                end = segment['timestamp'][1]
                text = segment['text'].strip()
                
                f.write(f"{i}\n")
                f.write(f"{format_timestamp(start)} --> {format_timestamp(end)}\n")
                f.write(f"{text}\n\n")
    
        print("Transcription completed and saved to transcript.srt")
    
        EOF

    - name: Commit transcript
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        git add .
        git commit -m 'Add transcript'
        git push origin "process-${{ needs.download-and-process.outputs.branch_id }}"
